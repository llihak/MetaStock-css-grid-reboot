var lhn = typeof (lhn) == 'undefined' ? null : lhn; (function (lhnJsSdk) { var appurl = "https://developer.livehelpnow.net"; var sockurl = "wss://app.livehelpnow.net"; var baseurl = "https://www.livehelpnow.net/lhn/"; var apiversion = "/api"; var develop = false; var systems = { c: "chat", t: "ticket", kb: "knowledge", cb: "callback" }; var systems_long = { chat: "c", ticket: "t", knowledge: "kb", callback: "cb" }; var system_windows = {chat: 0, ticket: 0, knowledge: 0, callback: 0}; var firstOpen = {chat: true, ticket: true, callback: true, knowledge: true}; var hoc_chat_order, typeahead, lhnsocket, lastMessageId, firstMessageId, chatChan, chatSession, chatSurveyId, custName, activeTab, socket_timer, motive, isFocused, poweredByInterval = null; var isWorking, isCustomerTyping, isOperatorTyping, isOnline, isBlocked, moreMessages, isLoadingMessages, formsWorking, socketJoined, started_jump_logic, jl_working = false; var chatType = "prechat"; var operLanguageId = "", custLanguageId = ""; var preChatType = "basic"; var chatOfflineType = {offline: 0}; lhnJsSdk.isHOC = false; var gaType = null; var ga_local = {}; /*var lhnxAlias = window.LiveHelpNowAnalyticsObject || 'lhnx'; window[lhnxAlias] = window[lhnxAlias] || function() { (window[lhnxAlias].q = window[lhnxAlias].q || []).push(arguments); };*/ function init() { if(window.lhnJsSdkLoaded){return;} window.lhnJsSdkLoaded = true; window.lhnJsSdkInit(); detectGaType(); if(typeof lhnJsSdk.options == 'undefined'){lhnJsSdk.options = {};} lhnJsSdk.options.tracking = typeof (lhnJsSdk.options.tracking) != 'undefined' ? lhnJsSdk.options.tracking : true; (function (d, s, h, u) { var head = d.getElementsByTagName(h)[0]; var newscript = d.createElement(s); newscript.src = u; var done = false; newscript.onload = newscript.onreadystatechange = function () { if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) { done = true; newscript.onload = newscript.onreadystatechange = null; if (head && newscript.parentNode) { head.removeChild(newscript); } jQuery = typeof jQuery != "undefined" ? jQuery : lhnQuery; if (navigator.appVersion.indexOf("MSIE 8.") > 0) { (function (d, l, h, u) { var head = d.getElementsByTagName(h)[0]; var shimjs = d.createElement(l); shimjs.type = "text/javascript"; shimjs.src = u; head.appendChild(shimjs); }(document, 'script', 'head', appurl + '/js/es5-shim.min.js')); } if (navigator.appVersion.indexOf("MSIE ") > 0 || (!!window.MSInputMethodContext && !!document.documentMode)) { (function (d, l, h, u) { var head = d.getElementsByTagName(h)[0]; var shimjs = d.createElement(l); shimjs.type = "text/javascript"; shimjs.src = u; head.appendChild(shimjs); }(document, 'script', 'head', 'https://cdn.livehelpnow.net/assets/js/bluebird/bluebird.min.js')); } lhnQuery.fn.serializeObject = function (win) { win = typeof win == 'undefined' && win != null ? 0 : win; if (win == null) { var o = {}; } else { var o = { view_id: win }; } var a = this.serializeArray(); lhnQuery.each(a, function () { this.value = html2text(this.value); if (o[this.name] !== undefined) { if (!o[this.name].push) { o[this.name] = [o[this.name]]; } o[this.name].push(lhnQuery.trim(this.value) || ''); } else { o[this.name] = lhnQuery.trim(this.value) || ''; } }); return o; }; if (lhnStorage.getData("lhnJWT") && typeof (JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1]))) != 'undefined' && qs("lhn_preview") != "true") { setup(); } else { connectOAuth(); } } }; head.appendChild(newscript); if (typeof lhnErrorStats == 'undefined' && window.addEventListener) { var lhnErrorStats = '', bFireOnError = false; var lhnUserAgent = ''; if ((navigator.userAgent.indexOf("Opera") || navigator.userAgent.indexOf('OPR')) != -1) { lhnUserAgent = 'Opera'; } else if (navigator.userAgent.indexOf("Chrome") != -1) { lhnUserAgent = 'Chrome'; } else if (navigator.userAgent.indexOf("Safari") != -1) { lhnUserAgent = 'Safari'; } else if (navigator.userAgent.indexOf("Firefox") != -1) { lhnUserAgent = 'Firefox'; } else if ((navigator.userAgent.indexOf("MSIE") != -1) || (!!document.documentMode == true)) {lhnUserAgent = 'Internet Explorer';} else { lhnUserAgent = navigator.userAgent; } window.addEventListener('error', function (e) { if (e.target.src && e.type) { lhnErrorStats += e.type + ' loading ' + e.target.localName + ' ' + e.target.src + ' | '; } else if (e.message) { if (bFireOnError == true) { lhnSendError(e.message + ' line:' + e.lineno + ' column:' + e.colno, lhnUserAgent); } else { lhnErrorStats += e.message + ' line:' + e.lineno + ' column:' + e.colno + ' | '; } } }, true); window.setTimeout(function () { lhnSendError(lhnErrorStats, lhnUserAgent); bFireOnError = true; }, 8000); } }(document, 'script', 'head', appurl + '/js/lhn-jquery-1.11.0.min.js')); } function connectOAuth() { var url = appurl + '/oauth/token/'; var data = 'client_id=' + encodeURIComponent(lhnJsSdk.setup.application_id); data += '&client_secret=' + encodeURIComponent(lhnJsSdk.setup.application_secret); data += '&grant_type=' + "client_credentials"; if(lhnStorage.getData("lhnContact") != null && lhnStorage.getData("lhnContact") != "null"){ data += '&lhncontact=' + lhnStorage.getData("lhnContact"); } data += '&callback=?'; lhnQuery.getJSON(url, data, function (data) { lhnStorage.setData("lhn" + data.token_type, data.access_token, data.expires_in); lhnStorage.setData("lhnRefresh", data.refresh_token, data.refresh_expires_in); setup(); }); } function visitorSetup() { lhnJsSdk.setup.account = JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).iss.client; log("Account #", lhnJsSdk.setup.account); lhnJsSdk.settings = typeof lhnJsSdk.settings != "undefined" ? lhnJsSdk.settings : {}; visitor_tracking = JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).iss.visitor_tracking; visitor_tracking = typeof(visitor_tracking) != 'undefined' ? visitor_tracking : true; if (!(navigator.javaEnabled())) { lhnJsSdk.options.java = "No"; } else { lhnJsSdk.options.java = "Yes"; } lhnJsSdk.options.res = ""; lhnJsSdk.options.depth = ""; if (window.screen) { lhnJsSdk.options.res = screen.width + 'x' + screen.height; lhnJsSdk.options.depth = screen.colorDepth; } lhnJsSdk.options.custom1 = typeof lhnJsSdk.options.custom1 == 'undefined' ? "" : lhnJsSdk.options.custom1; lhnJsSdk.options.custom2 = typeof lhnJsSdk.options.custom2 == 'undefined' ? "" : lhnJsSdk.options.custom2; lhnJsSdk.options.custom3 = typeof lhnJsSdk.options.custom3 == 'undefined' ? "" : lhnJsSdk.options.custom3; lhnJsSdk.options.dept = typeof lhnJsSdk.options.dept == 'undefined' ? lhnJsSdk.settings.department : lhnJsSdk.options.dept; lhnJsSdk.options.referrer = (document.referrer.length > 400) ? encodeURIComponent(document.referrer.substring(0, 400)) : encodeURIComponent(document.referrer); lhnJsSdk.options.pagetitle = (document.title.length > 100) ? encodeURIComponent(document.title.substring(0, 100)) : encodeURIComponent(document.title); lhnJsSdk.options.pageurl = (encodeURIComponent(document.location).length > 500) ? encodeURIComponent(document.location).substring(0, 500) : encodeURIComponent(document.location); lhnJsSdk.options.cookie = navigator.cookieEnabled; lhnJsSdk.options.embedArticle = typeof lhnJsSdk.options.embedArticle == 'undefined' ? true : lhnJsSdk.options.embedArticle; lhnJsSdk.options.sound = typeof lhnJsSdk.options.sound == 'undefined' ? appurl + "/audio/hoc_alert.wav" : lhnJsSdk.options.sound; lhnJsSdk.options.jumplogic = typeof lhnJsSdk.options.jumplogic == 'undefined' ? {} : lhnJsSdk.options.jumplogic; lhnJsSdk.options.invite_as_chat = typeof lhnJsSdk.options.invite_as_chat == 'undefined' ? false : lhnJsSdk.options.invite_as_chat; lhnJsSdk.options.domain_policy = typeof lhnJsSdk.options.domain_policy == 'undefined' ? "unknown" : lhnJsSdk.options.domain_policy; chatSurveyId = typeof(lhnJsSdk.options.chatSurveyId) == 'undefined' ? chatSurveyId : lhnJsSdk.options.chatSurveyId; if ((lhnJsSdk.options.tracking != false && visitor_tracking == true) || lhnJsSdk.chatSession != null) { var data = { java: lhnJsSdk.options.java, res: lhnJsSdk.options.res, depth: lhnJsSdk.options.depth, custom1: lhnJsSdk.options.custom1, custom2: lhnJsSdk.options.custom2, custom3: lhnJsSdk.options.custom3, dept: lhnJsSdk.options.dept, cookie: lhnJsSdk.options.cookie, referrer: lhnJsSdk.options.referrer, pagetitle: lhnJsSdk.options.pagetitle, pageurl: lhnJsSdk.options.pageurl, chatwindowid: system_windows["chat"] }; ajaxCall(appurl + apiversion + "/visitor/init/", data, "POST", joinVisitorChannel); } } function joinVisitorChannel(data){ if(typeof data.payload != 'undefined' && typeof data.payload.online_status != 'undefined'){ lhnJsSdk.isOnline = data.payload.online_status; updateButtons(); } if(typeof data.payload.jwt != 'undefined' && data.payload.jwt){ lhnStorage.setData("lhnJWT", data.payload.jwt, data.payload.jwt_expire); resource_id = JSON.parse(decodeBase64(data.payload.jwt.split(".")[1])).resource.id; lhnStorage.setData("lhnContact", resource_id, 63113904); }else{ resource_id = JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).resource.id; if(resource_id != null && resource_id != "null"){ lhnStorage.setData("lhnContact", resource_id, 63113904); } } /*try { var jwt = JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])); var visitorId = (jwt || {resource:{}}).resource.id; if (visitorId != void 0) { initLhnxTracking(visitorId); } }catch(e) { console.error("ERROR", "Failed to link hoc channel with lhnx visitor.", e); }*/ if(typeof data.payload.conversions != 'undefined' && data.payload.conversions.length > 0){ for(var lhnConv = 0; lhnConv < data.payload.conversions.length; lhnConv++){ if(data.payload.conversions[lhnConv].type == 0){ lhnJsSdk.track_conversion(data.payload.conversions[lhnConv].id, null); }else if(data.payload.conversions[lhnConv].type == 1 && typeof(data.payload.conversions[lhnConv].fieldSelector != 'undefined')){ lhnJsSdk.track_conversion(data.payload.conversions[lhnConv].id, window[data.payload.conversions[lhnConv].fieldSelector]); }else if(data.payload.conversions[lhnConv].type == 2 && typeof(data.payload.conversions[lhnConv].fieldSelector != 'undefined')){ $el = lhnQuery("#" + data.payload.conversions[lhnConv].fieldSelector); if($el.length == 0){ $el = lhnQuery("." + data.payload.conversions[lhnConv].fieldSelector); } if($el[0]){ lhnJsSdk.track_conversion(data.payload.conversions[lhnConv].id, lhnQuery($el[$el.length-1]).text()); } }else if(data.payload.conversions[lhnConv].type == 3 && typeof(data.payload.conversions[lhnConv].fieldSelector != 'undefined')){ var regex = JSON.parse(data.payload.conversions[lhnConv].fieldSelector); var lhnConvRegEx = new RegExp(regex.RegexMatch, regex.RegexOptions); if (lhnConvRegEx.exec(document.body.innerHTML)!==null){ lhnJsSdk.track_conversion(data.payload.conversions[lhnConv].id, lhnConvRegEx.exec(document.body.innerHTML)[1]); } } } } (function (d, l, h, u) { var head = d.getElementsByTagName(h)[0]; var wbJS = d.createElement(l); wbJS.type = "text/javascript"; wbJS.src = u; var done = false; wbJS.onload = wbJS.onreadystatechange = function () { if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) { done = true; connectSocket(); if(lhnJsSdk.chatSession){ joinChatSession(); }else if(started_jump_logic == true && preChatType == "jump_logic"){ openHOC("c"); }else{ if(typeof lhnJsSdk.settings.autoinvite != 'undefined' && lhnJsSdk.settings.autoinvite.enabled == true && lhnStorage.getData("lhnAutoInviteShown") != "true" && (lhnJsSdk.isOnline == true || (preChatType == "jump_logic" && (typeof lhnJsSdk.settings.autoinvite.type !='undefined' && lhnJsSdk.settings.autoinvite.type != "message")))){ setTimeout(function(){ if(!lhnQuery("#lhnHelpOutCenter").hasClass("lhnActive")){ showInvite(lhnJsSdk.settings.autoinvite.message, 0, true, "auto", {type: (typeof lhnJsSdk.settings.autoinvite.type != 'undefined' ? lhnJsSdk.settings.autoinvite.type : 'message')}); lhnStorage.setData("lhnAutoInviteShown", "true", 60*60); var data = { message_type: 1, message_sub_type: 7, message: "Auto invitation shown: " + lhnJsSdk.settings.autoinvite.message }; chatSessionId = (lhnJsSdk.chatSession == null) ? 0 : lhnJsSdk.chatSession; ajaxCall(appurl + apiversion + '/chat/' + chatSessionId + '/message/', data, "POST", null, {}); var data = { invite_type: "auto" }; ajaxCall(appurl + apiversion + '/analytics/chat/invite_tracking', data, "POST", null, {}); } }, lhnJsSdk.settings.autoinvite.delay*1000); } if(typeof data.payload.invites != 'undefined' && data.payload.invites.length > 0){ for(var lhnInv = 0; lhnInv < data.payload.invites.length; lhnInv++){ var invite_payload = { visitor_chat_session: { chat_message: data.payload.invites[lhnInv].message }, operator: { id: data.payload.invites[lhnInv].createdBy }, trigger: { delay: data.payload.invites[lhnInv].delaySec, id: data.payload.invites[lhnInv].createdBy } }; switch(data.payload.invites[lhnInv].type){ case "proactive": proactiveMsgReceived(invite_payload); break; case "trigger": triggerMsgReceived(invite_payload); break; case "promo": triggerPromoReceived(invite_payload); break; default: break; } } } } if(typeof window.lhnJsSdkReady == "function"){ window.lhnJsSdkReady(); } } }; head.appendChild(wbJS); }(document, 'script', 'head', appurl + '/js/socket.js')); } /*function initLhnxTracking(visitId) { var lhnx = window[lhnxAlias]; var jwt = JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])) || {}; var features = (jwt["iss"] || {})["lhnx_features"] || []; if(features.length > 0) { (function (i, s, o, g, r, a, m) { i['LiveHelpNowAnalyticsObject'] = r; i[r] = i[r] || function () { (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date();a = s.createElement(o), m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m) })(window, document, 'script', appurl + '/js/lhnx.js', 'lhnx'); lhnx("create", { token: "lhnJWT", visitId: visitId }); lhnx("set", "transport", "xhr"); if(features.indexOf("sync_contact") > -1) lhnx("require", "sync_contact", {}); if(features.indexOf("time_on_page") > -1) lhnx("require", "time_on_page", {transport: "beacon"}); if(features.indexOf("form_collection") > -1) lhnx("require", "form_collection", {transport: "beacon"}); if(features.indexOf("click_tracking") > -1) lhnx("require", "click_tracking", {transport: "beacon"}); /* NOTE: do not remove this line it is need in order to send 2years trackingId and initialize (if not already) visitor aggregate */ /*lhnx("send", "pageview"); } }*/ function track_conversion(id, value){ if(value){ value = value.toString().replace(/[^0-9.]/g, ""); } ajaxCall(appurl + apiversion + "/conversion/", {id: id, value: value}, "PUT"); doGaTrack("LiveChat", "Conversion", false); if(typeof window.lhnConversion == "function"){ window.lhnConversion(id, value); } } function setup() { lhnJsSdk.controls = typeof lhnJsSdk.controls != "undefined" ? lhnJsSdk.controls : [{type: "default"}]; for (var o = 0; o < lhnJsSdk.controls.length; o++) { log("Installation Type", lhnJsSdk.controls[o].type); log("ID", lhnJsSdk.controls[o].id); switch (lhnJsSdk.controls[o].type) { case "hoc": hocInit(lhnJsSdk.controls[o]); lhnJsSdk.isHOC = true; break; case "chat_button": embedChatButton((lhnJsSdk.controls[o].element || null), lhnJsSdk.controls[o].id, (lhnJsSdk.controls[o].window || 0)); break; default: lhnJsSdk.chatSession = ((typeof(lhnJsSdk.chatSession) == 'undefined' || lhnJsSdk.chatSession == null) ? lhnStorage.getData("lhnChatSession") : lhnJsSdk.chatSession); visitorSetup(); buildDictionary(); setTimeout(function(){ lhnQuery("#lhnHocButton").show(); }, 50); break; } } } function updateOnlineStatus(payload) { if(typeof payload.chat.online_status != 'undefined' && typeof payload.chat.online_type != 'undefined'){ if ((lhnJsSdk.options.dept != 0 && payload.chat.online_type == "department") || (lhnJsSdk.options.dept == 0 && payload.chat.online_type == "client")){ lhnJsSdk.isOnline = (lhnJsSdk.chatSession == null) ? payload.chat.online_status : true; if(typeof window.lhnStatusUpdate == "function"){ window.lhnStatusUpdate(); } if(lhnJsSdk.chatSession == null){ firstOpen.chat = true; } updateButtons(); if(lhnJsSdk.isHOC){ updateEmbeddedChat(); }else{ if(typeof payload.el != 'undefined' && typeof payload.win != 'undefined' && lhnJsSdk.isOnline == false && lhnQuery("#" + payload.chat.el).html() != "" && !lhnJsSdk.chatSession){ embedPreChat(payload.el, payload.win); } } } } } function embedChatButton(el, button, win) { var data = { system: "chat", layout: "", partial: "button", button_id: button, opts: { online_status: (lhnJsSdk.isOnline || false) } }; ajaxCall(appurl + apiversion + '/ui/element/', data, "GET", embedChatButtonCallback, { el: el, win: win }); } function embedChatButtonCallback(data, opts) { if (typeof (data.payload) != 'undefined') { opts.el = opts.el == null ? "body" : "#" + opts.el; lhnQuery(data.payload).appendTo(opts.el); lhnQuery(document).on("click", "#aLHNBTN", function () { openChat(opts.win); }); } } function updateButtons() { var status = lhnJsSdk.isOnline == false ? "offline" : "online"; lhnQuery(".lhnchatimg").each(function () { lhnQuery(this).attr("src", lhnQuery(this).attr(status)); }); var dict_status = lhnJsSdk.isOnline == false ? "livechat_offline" : "livechat"; lhnQuery("#lhnHocButton .lhnHocChatTxtCont span").text(lhnJsSdk.dictionary[dict_status]); } function updateEmbeddedChat(){ var win = 0; if(chatType == "timeout" || (lhnJsSdk.isOnline == false && !lhnJsSdk.chatSession && !firstOpen.chat)){ lhnQuery.each(lhnJsSdk.settings.systems, function(k){ if(lhnQuery(this)[0].system == "chat"){ win = lhnQuery(this)[0].window; } }); embedPreChat("hocSyschat", win); } } function openChat(opts) { if(lhnQuery("#hocSyschat").length > 0){ openHOC('c'); } else { if (document.getElementById('Zsmenu')) { document.getElementById('Zsmenu').style.display = "none"; } if (typeof CustomOpenLHNChat == 'function') { CustomOpenLHNChat(); return false; } if (typeof lhnWin !== 'undefined' && lhnWin) { if (!lhnWin.closed) { lhnWin.blur(); setTimeout(lhnWin.focus(), 10); return false; } } var wleft = (screen.width - 500 - 32) / 2; var wtop = (screen.height - 500 - 96) / 2; var sScrollbars = (lhnJsSdk.isOnline == false) ? "yes" : "no"; lhnWin = window.open('//www.livehelpnow.net/lhn/livechatvisitor.aspx?zzwindow=' + opts.win + '&lhnid=' + 1 + '&d=' + lhnJsSdk.options.dept, 'lhnchat', 'left=' + wleft + ',top=' + wtop + ',width=500,height=500,toolbar=no,location=no,directories=no,status=yes,menubar=no,scrollbars=' + sScrollbars + ',copyhistory=no,resizable=yes'); if (typeof (_gaq) != 'undefined' && _gaq) { _gaq.push(['_trackEvent', 'LiveHelpNow', 'Chat button clicked', '']); } if (typeof (ga) != 'undefined' && ga) { ga('send', 'event', 'LiveHelpNow', 'Chat button clicked'); } } } function hocInit(opts) { ajaxCall(appurl + apiversion + '/ui/hoc/' + opts.id + '/init/', {current_url: document.location.href}, "GET", hocSetup, opts); } function hocSetup(data, opts) { if (typeof data.payload != undefined && typeof data.payload.options != 'undefined') { var language = typeof data.payload.options.language == 'undefined' ? "english" : data.payload.options.language; lhnJsSdk.settings = { systems: data.payload.options.systems, styles: data.payload.options.styles, poweredby: data.payload.options.poweredby, department: data.payload.options.department, autoinvite: data.payload.options.autoinvite, general: { docWidth: lhnQuery(document).width(), winWidth: window.screen.width, ratio: lhnQuery(document).width() / window.screen.width }, button: typeof data.payload.options.button != 'undefined' ? data.payload.options.button : "slide", language: language }; lhnJsSdk.settings.styles.layout = typeof lhnJsSdk.settings.styles.layout == 'undefined' ? "modern" : lhnJsSdk.settings.styles.layout; lhnJsSdk.settings.styles.position = typeof lhnJsSdk.settings.styles.position == 'undefined' ? "left" : lhnJsSdk.settings.styles.position; lhnJsSdk.settings.styles.button_position = typeof lhnJsSdk.settings.styles.button_position == 'undefined' ? "right" : lhnJsSdk.settings.styles.button_position; if(typeof lhnJsSdk.options.autoinvite != 'undefined'){ lhnQuery.extend(lhnJsSdk.settings.autoinvite, lhnJsSdk.options.autoinvite); } buildDictionary(); if(isMobile()){ lhnJsSdk.settings.styles.layout = "sidebar"; } (function (d, l, h, u) { var head = d.getElementsByTagName(h)[0]; var newCSS = d.createElement(l); newCSS.type = "text/css"; newCSS.rel = "stylesheet"; newCSS.href = u; newCSS.crossOrigin = "anonymous"; head.insertBefore(newCSS, head.firstChild); }(document, 'link', 'head', appurl + '/css/modern/' + lhnJsSdk.settings.styles.theme + '.css')); (function (d, l, h, u) { var head = d.getElementsByTagName(h)[0]; var newCSS = d.createElement(l); newCSS.type = "text/css"; newCSS.rel = "stylesheet"; newCSS.href = u; newCSS.crossOrigin = "anonymous"; head.insertBefore(newCSS, head.firstChild); }(document, 'link', 'head', appurl + '/css/fonts/opensans.css')); (function (d, l, h, u) { var head = d.getElementsByTagName(h)[0]; var newCSS = d.createElement(l); newCSS.type = "text/css"; newCSS.rel = "stylesheet"; newCSS.href = u; newCSS.crossOrigin = "anonymous"; head.insertBefore(newCSS, head.firstChild); }(document, 'link', 'head', appurl + '/css/modern/button.css')); (function (d, l, h, u) { css_done = false; var head = d.getElementsByTagName(h)[0]; var newCSS = d.createElement(l); newCSS.type = "text/css"; newCSS.rel = "stylesheet"; newCSS.href = u; newCSS.crossOrigin = "anonymous"; newCSS.onload = newCSS.onreadystatechange = function () { if (!css_done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) { css_done = true; setTimeout(function(){lhnQuery("#lhnHelpOutCenter").show();},100); } }; head.insertBefore(newCSS, head.firstChild); }(document, 'link', 'head', appurl + '/css/modern/hoc.css')); if(typeof opts.css != 'undefined'){ (function (d, l, h, u) { var head = d.getElementsByTagName(h)[0]; var newCSS = d.createElement(l); newCSS.type = "text/css"; newCSS.rel = "stylesheet"; newCSS.href = u; newCSS.crossOrigin = "anonymous"; head.appendChild(newCSS); }(document, 'link', 'head', opts.css)); } (function (d, e) { var lhndiv = d.getElementsByTagName("body"); lhndiv = d.createElement(e); lhndiv.id = "lhnHelpOutCenter"; lhndiv.className = "lhn" + lhnJsSdk.settings.styles.position + " lhnWindow circleButton lhnWindow-" + lhnJsSdk.settings.styles.layout; lhndiv.innerHTML = data.payload.template; lhndiv.style.display = "none"; d.body.appendChild(lhndiv); }(document, 'div')); lhnJsSdk.settings.general.hocWidth = isMobile() ? "100%" : 330; lhnQuery("#lhnHelpOutCenter").width(lhnJsSdk.settings.general.hocWidth); var systemCount = Object.keys(lhnJsSdk.settings.systems).length; (function (d, id, e) { var lhndiv, lhnHOC = d.getElementById(id); lhndiv = d.createElement(e); lhndiv.id = "lhnHocMenu"; lhnHOC.appendChild(lhndiv); }(document, 'lhnHocMenuContainer', 'ul')); for (var k in lhnJsSdk.settings.systems) { (function (d, id, e, order, sys) { var lhnli, lhnHOC = d.getElementById(id); lhnli = d.createElement(e); lhnli.setAttribute("systemorder", order); lhnli.setAttribute("systemtype", sys); lhnli.className = "lhnHocTab"; lhnli.innerHTML = lhnJsSdk.dictionary[lhnJsSdk.settings.systems[k].system + "Menu"]; lhnli.style.width = (100/systemCount) + "%"; lhnHOC.appendChild(lhnli); }(document, 'lhnHocMenu', 'li', k, lhnJsSdk.settings.systems[k].system)); (function (d, id, e, order, sys, win) { var lhndiv, lhnHOC = d.getElementById(id); lhndiv = d.createElement(e); lhndiv.setAttribute("systemorder", order); lhndiv.setAttribute("systemtype", sys); lhndiv.id = "hocSys" + sys; lhndiv.className = "lhnHocSection"; lhnHOC.appendChild(lhndiv); }(document, 'hocContainer', 'div', k, lhnJsSdk.settings.systems[k].system, lhnJsSdk.settings.systems[k].window)); if(systemCount > 1){ lhnQuery(".lhnHocToggleMenu, .lhnWindow-tabs").show(); }else{ lhnQuery("#hocContainer").addClass("no-menu"); } switch(lhnJsSdk.settings.systems[k].system){ case "chat": lhnJsSdk.chatSession = lhnJsSdk.settings.systems[k].active_chat_session_id || null; started_jump_logic = lhnJsSdk.settings.systems[k].started_jump_logic || null; custName = lhnStorage.getData("lhnCustName"); chatSurveyId = typeof(lhnJsSdk.settings.systems[k].survey) != 'undefined' ? lhnJsSdk.settings.systems[k].survey : null; system_windows["chat"] = typeof(lhnJsSdk.options.chatWindowId) == 'undefined' ? lhnJsSdk.settings.systems[k].window : lhnJsSdk.options.chatWindowId; preChatType = lhnJsSdk.settings.systems[k].jump_logic == true ? "jump_logic" : preChatType; chatOfflineType = typeof(lhnJsSdk.settings.systems[k].offline) != 'undefined' ? lhnJsSdk.settings.systems[k].offline : {offline: 0}; break; case "callback": system_windows["callback"] = typeof(lhnJsSdk.options.callbackWindowId) == 'undefined' ? lhnJsSdk.settings.systems[k].window : lhnJsSdk.options.callbackWindowId; break; default: system_windows[lhnJsSdk.settings.systems[k].system] = lhnJsSdk.settings.systems[k].window; } } visitorSetup(); setTimeout(function(){ if(lhnJsSdk.chatSession != null && !isMobile()){ openHOC("c"); } }, 1000); lhnQuery(document).ready(function () { if(typeof lhnJsSdk.settings.styles.nobutton == "undefined" || lhnJsSdk.settings.styles.nobutton == false){ (function (d, b, e) { var hocButtonHtml = ""; var dict_status = lhnJsSdk.isOnline == false ? "livechat_offline" : "livechat"; hocButtonHtml += '<div class="lhnHocChatBtnCont" tabindex="0">'; hocButtonHtml += '<div class="lhnHocChatBtn">'; hocButtonHtml += '<div class="lhnHocChatBubbleCont">'; hocButtonHtml += '<div class="lhnHocChatBubble lhnHocFrontBubble">'; hocButtonHtml += '<div id="lhnOpType" class="lhnHocCtCont">'; hocButtonHtml += '<div class="lhnHocChatTalk lhnHocCt1"></div>'; hocButtonHtml += '<div class="lhnHocChatTalk lhnHocCt2"></div>'; hocButtonHtml += '<div class="lhnHocChatTalk lhnHocCt3"></div>'; hocButtonHtml += '<div class="lhnHocButtonClear"></div>'; hocButtonHtml += '</div>'; hocButtonHtml += '</div>'; hocButtonHtml += '<div class="lhnHocChatBubble lhnHocBackBubble"></div>'; hocButtonHtml += '</div>'; hocButtonHtml += '<div class="lhnHocChatTxtCont">'; hocButtonHtml += '<span role="button" tabindex="0" aria-pressed="false">' + lhnJsSdk.dictionary[dict_status] + '</span>'; hocButtonHtml += '</div>'; hocButtonHtml += '<div class="lhnHocButtonClear"></div>'; hocButtonHtml += '</div>'; hocButtonHtml += '</div>'; var lhndiv = d.getElementsByTagName(b); lhndiv = d.createElement(e); lhndiv.id = "lhnHocButton"; lhndiv.className = "lhn" + lhnJsSdk.settings.styles.button_position + " lhn" + lhnJsSdk.settings.button; lhndiv.innerHTML = hocButtonHtml; lhndiv.style.display = "none"; d.body.appendChild(lhndiv); }(document, 'body', 'div')); } if (isMobile()) { lhnJsSdk.settings.general.hocWidth = (lhnJsSdk.settings.general.docWidth / lhnJsSdk.settings.general.ratio); lhnQuery("#lhnHelpOutCenter, #lhnHocButton, #lhnHocInvite").css("zoom", lhnJsSdk.settings.general.ratio); lhnQuery("#lhnHelpOutCenter, #lhnHocButton, #lhnHocInvite").css("-moz-transform", "scale(" + lhnJsSdk.settings.general.ratio + ")"); lhnQuery("#lhnHelpOutCenter, #lhnHocButton, #lhnHocInvite").css("-moz-transform-origin", "0 0"); lhnQuery("#lhnHelpOutCenter, #lhnHocButton, #lhnHocInvite").addClass("lhnMobileHoc"); } setTimeout(function(){ lhnQuery("#lhnHocButton").show(); if(typeof window.lhnStatusUpdate == "function"){ window.lhnStatusUpdate(); } }, 100); lhnQuery(".lhnHocTab").click(function () { switchHocTab(lhnQuery(this).attr("systemtype")); return false; }); lhnQuery(".lhnHocClose, .lhnWindow-header-minimizer").click(function(){ closeHOC(); return false; }); lhnQuery(".lhnHocChatClose, .lhnWindow-header-closer").click(function(){ if((lhnJsSdk.chatSession != null || lhnQuery(".lhnCustomerMessage").length > 0) && activeTab == "c"){ lhnQuery(".lhnPrompt.closechat, .lhnPromptOverlay.closechat").show(); }else{ /*endChat();*/ closeHOC(); } return false; }); lhnQuery(document).off("click", ".lhnPromptAccept.closechat").on("click", ".lhnPromptAccept.closechat", function(){ endChat(); }); lhnQuery(document).off("click", ".lhnPromptDecline.closechat").on("click", ".lhnPromptDecline.closechat", function(){ lhnQuery(".lhnPrompt, .lhnPromptOverlay").hide(); closeHOC(); }); lhnQuery(".lhnHocExternalClose").click(function(){ externalPageClose(); return false; }); lhnQuery(".lhnHocToggleMenu").click(function(){ lhnQuery("#lhnHocMenuContainer").slideToggle(200); return false; }); lhnQuery("#lhnHocButton").click(function(e){ if(!lhnQuery(e.target).is(".lhnClose")){ if(lhnQuery("#lhnHelpOutCenter").css("visibility") == "visible"){ lhnJsSdk.closeHOC(); }else{ lhnJsSdk.openHOC(); } } }); lhnQuery("#lhnHocButton").keypress(function(e){ if(!lhnQuery(e.target).is(".lhnClose") && (e.keyCode == 13 || e.keyCode == 32)){ if(lhnQuery("#lhnHelpOutCenter").css("visibility") == "visible"){ lhnJsSdk.closeHOC(); }else{ lhnJsSdk.openHOC(); } } }); lhnQuery(document).off("click", ".lhnHocInviteButton.lhnstart").on("click", ".lhnHocInviteButton.lhnstart", function(){ openHOC('c'); if(lhnQuery("#lhnHocInvite").hasClass("lhn_auto")){ motive = "auto_invite"; }else if(lhnQuery("#lhnHocInvite").hasClass("lhn_proactive")){ motive = "proactive_invite"; }else if(lhnQuery("#lhnHocInvite").hasClass("lhn_trigger")){ motive = "trigger_invite:" + lhnQuery("#lhnHocInvite").attr("rel"); }else if(lhnQuery("#lhnHocInvite").hasClass("lhn_manual")){ motive = "manual_invite"; }else{ motive = null; } if(typeof window.lhnJsSdkInviteAccepted == "function"){ window.lhnJsSdkInviteAccepted(); } clearTimeout(lhnJsSdk.trigger_timeout); hideInvite(); if(motive != null){ doGaTrack("LiveChat", "Invite-Accepted", false); } }); lhnQuery(document).off("click", ".lhnHocInviteButton.lhncancel").on("click", ".lhnHocInviteButton.lhncancel", function(){ if(lhnQuery("#lhnHocInvite").hasClass("lhn_auto")){ var data = { message_type: 1, message_sub_type: 136, message: "Auto invitation dismissed" }; }else if(lhnQuery("#lhnHocInvite").hasClass("lhn_proactive")){ var data = { message_type: 1, message_sub_type: 137, message: "Proactive invitation dismissed" }; }else if(lhnQuery("#lhnHocInvite").hasClass("lhn_trigger")){ var data = { message_type: 1, message_sub_type: 138, message: "Trigger invitation dismissed" }; }else{ var data = null; } hideInvite(); if(typeof window.lhnJsSdkInviteRejected == "function"){ window.lhnJsSdkInviteRejected(); } if(data != null){ chatSessionId = (lhnJsSdk.chatSession == null) ? 0 : lhnJsSdk.chatSession; ajaxCall(appurl + apiversion + '/chat/' + chatSessionId + '/message/', data, "POST", null, {}); doGaTrack("LiveChat", "Invite-Declined", false); } }); }); } } function generateHocContents(sys, opts) { switch (sys) { case "chat": system_windows[sys] = typeof(lhnJsSdk.options.chatWindowId) == 'undefined' ? system_windows["chat"] : lhnJsSdk.options.chatWindowId; if(lhnJsSdk.lhnsocket == null){ if(typeof Socket == 'undefined'){ var head = document.getElementsByTagName("head")[0]; var wbJS = document.createElement('script'); wbJS.type = "text/javascript"; wbJS.src = appurl + '/js/socket.js'; var done = false; wbJS.onload = wbJS.onreadystatechange = function () { if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) { done = true; connectSocket(); sleep(500).then(function() { embedPreChat("hocSys" + sys, system_windows[sys], opts); }); } }; head.appendChild(wbJS); }else{ connectSocket(); sleep(500).then(function() { embedPreChat("hocSys" + sys, system_windows[sys], opts); }); } }else{ embedPreChat("hocSys" + sys, system_windows[sys], opts); } break; case "ticket": embedTicket("hocSys" + sys, system_windows[sys]); break; case "knowledge": embedKbLookup("hocSys" + sys, system_windows[sys]); break; case "callback": system_windows[sys] = typeof(lhnJsSdk.options.callbackWindowId) == 'undefined' ? system_windows["callback"] : lhnJsSdk.options.callbackWindowId; embedCallback("hocSys" + sys, system_windows[sys]); break; } } function embedPreChat(el, win, opts) { lhnQuery("#hocSyschat").html(''); lhnJsSdk.chatSession = chatType == "timeout" ? null : (typeof(lhnJsSdk.chatSession) == 'undefined' ? lhnStorage.getData("lhnChatSession") : lhnJsSdk.chatSession); if(lhnJsSdk.chatSession){ firstOpen.chat = false; embedChat(el, win, null); }else{ lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); if(lhnJsSdk.isOnline == false && (preChatType != "jump_logic" || (preChatType == "jump_logic" && chatType == "timeout"))){ switch(Object.keys(chatOfflineType)[0]) { case "callback": if(lhnQuery(".lhnHocSection[systemtype='callback']").length > 0){ lhnQuery(".lhnHocSection[systemtype='chat']").remove(); lhnQuery(".lhnHocTab[systemtype='chat']").remove(); if(lhnQuery(".lhnHocTab").length > 1){ lhnQuery(".lhnHocTab").css("width", (100/lhnQuery(".lhnHocTab").length) + "%"); }else{ lhnQuery(".lhnHocToggleMenu, .lhnWindow-tabs").hide(); lhnQuery("#hocContainer").addClass("no-menu"); } setTimeout(function(){ lhnJsSdk.openHOC("cb"); },0); }else{ embedCallback(el, chatOfflineType["callback"]); chatType = "offline"; updateHeaderFooter("chat"); } break; case "ticket": if(lhnQuery(".lhnHocSection[systemtype='ticket']").length > 0){ lhnQuery(".lhnHocSection[systemtype='chat']").remove(); lhnQuery(".lhnHocTab[systemtype='chat']").remove(); if(lhnQuery(".lhnHocTab").length > 1){ lhnQuery(".lhnHocTab").css("width", (100/lhnQuery(".lhnHocTab").length) + "%"); }else{ lhnQuery(".lhnHocToggleMenu, .lhnWindow-tabs").hide(); lhnQuery("#hocContainer").addClass("no-menu"); } setTimeout(function(){ lhnJsSdk.openHOC("t"); },0); }else{ embedTicket(el, chatOfflineType["ticket"]); chatType = "offline"; updateHeaderFooter("chat"); } break; default: var data = { system: "chat", layout: "hoc", partial: "offline", view_id: win }; ajaxCall(appurl + apiversion + '/ui/form/', data, "GET", embedOfflineChatCallback, { el: el, win: win }); break; } }else{ opts = typeof opts != 'undefined' ? opts : {}; var callback_opts = { el: el, win: win }; if(preChatType == "jump_logic" || typeof opts.invite != 'undefined'){ if(typeof opts != 'undefined'){callback_opts = lhnQuery.extend(callback_opts, opts);} var data = { system: "chat", layout: "hoc", partial: "conversation", view_id: win, type: "jump_logic"}; ajaxCall(appurl + apiversion + '/ui/form/', data, "GET", embedJumpLogic, callback_opts); }else{ var data = { system: "chat", layout: "hoc", partial: "pre_conversation", view_id: win }; ajaxCall(appurl + apiversion + '/ui/form/', data, "GET", embedPreChatCallback, callback_opts); } } } } function embedJumpLogic(data, opts){ if (typeof (data.payload) != 'undefined' && lhnQuery(".lhnChat").length == 0) { stopSocketTimer(); lhnQuery(data.payload).appendTo("#" + opts.el); lhnQuery("#" + opts.el + " .lhnPromptMsg").hide(); lhnQuery("#" + opts.el + " .lhnPromptAccept.closechat").text(lhnJsSdk.dictionary.endChat); lhnQuery("#" + opts.el + " .lhnPromptDecline.closechat").text(lhnJsSdk.dictionary.hide); lhnQuery("#" + opts.el + " .lhnSendButton").text(lhnJsSdk.dictionary.send); lhnQuery("#" + opts.el + " .lhnChatActions .lhnHocEndChatAction").text(lhnJsSdk.dictionary.endChat); lhnQuery("#" + opts.el + " .lhnChatActions .lhnHocEmailAction").text(lhnJsSdk.dictionary.email); lhnQuery("#" + opts.el + " #lhnChatMessageBox .message").attr("placeholder", lhnJsSdk.dictionary.chatBoxPlaceholder); firstOpen.chat = false; var nameSize = 12; var borderRadius = 5; chatType = "chat"; updateHeaderFooter("chat"); if(typeof window.lhnJsSdkPreChatShown == "function"){ window.lhnJsSdkPreChatShown(); } lhnQuery(document).ready(function () { if(lhnQuery(".lhnHocBillboards").length > 0){ lhnQuery("#hocSyschat.lhnHocSection").addClass("hasBillboard"); var slides = lhnQuery(".lhnHocBillboards").attr("data-cycle-slides"); var slide_count = lhnQuery(".lhnHocBillboards " + slides).length; var s = slide_count; lhnQuery(".lhnHocBillboards " + slides).each(function(){ if(s == slide_count){lhnQuery(this).addClass("lhnCurrentBillboard");} lhnQuery(this).css("z-index", s); s--; }); lhn_billboard_rotate = setInterval(function(){ lhnQuery(".lhnCurrentBillboard").fadeOut("slow", function(){ lhnQuery(this).css("z-index", 0); lhnQuery(this).removeClass("lhnCurrentBillboard"); if(lhnQuery(this).index() < slide_count-1){ lhnQuery(this).next().addClass("lhnCurrentBillboard"); }else{ lhnQuery(this).siblings().first().addClass("lhnCurrentBillboard"); } lhnQuery(this).show(); lhnQuery(".lhnHocBillboards " + slides).each(function(){ lhnQuery(this).css("z-index", parseInt(lhnQuery(this).css("z-index")) + 1); }); }); }, lhnQuery(".lhnHocBillboards").attr("data-cycle-timeout")); } lhnQuery(".lhnCustomerMessage > div, .lhnOperatorMessage > div").css("border-radius", borderRadius + "px"); lhnQuery(".lhnCustomerMessage > span, .lhnOperatorMessage > span").css("font-size", nameSize + "px"); lhnQuery(document).off("keypress", "#lhnChatMessageBox > textarea").on("keypress", "#lhnChatMessageBox > textarea", function (e) { if (e.keyCode == 13 && lhnQuery.trim(lhnQuery("#lhnChatMessageBox > textarea").val()) != "") { if(custName != null){opts.from_name = custName;} if(!lhnJsSdk.chatSession){ opts.new_message = lhnQuery("#lhnChatMessageBox > textarea").val(); jumpLogicStartChat(opts); } return false; }else if(e.keyCode == 13){ e.preventDefault(); return false; }else if(lhnQuery(this).val().length >= 4000){ e.preventDefault(); return false; } }); lhnQuery(document).off("keyup", "#lhnChatMessageBox > textarea").on("keyup", "#lhnChatMessageBox > textarea", function (e) { oldCustomerTyping = isCustomerTyping; if (lhnQuery.trim(lhnQuery("#lhnChatMessageBox > textarea").val()) != "") { var data = true; isCustomerTyping = true; lhnQuery(".lhnInput-chat_input-buttons .lhnSendButton").addClass("lhnShow"); } else { var data = false; isCustomerTyping = false; lhnQuery(".lhnInput-chat_input-buttons .lhnSendButton").removeClass("lhnShow"); } if(oldCustomerTyping != isCustomerTyping && lhnJsSdk.chatSession != null){ ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/set_typing_status/', {status: data}, "POST", null, {}); } }); lhnQuery(document).off("click", ".lhnSendButton").on("click", ".lhnSendButton", function(){ if(lhnQuery.trim(lhnQuery("#lhnChatMessageBox > textarea").val()) != ""){ if(custName != null){opts.from_name = custName;} if(!lhnJsSdk.chatSession){ opts.new_message = lhnQuery("#lhnChatMessageBox > textarea").val(); jumpLogicStartChat(opts); } } return false; }); lhnQuery(document).off("click", ".lhnWindow-basic .lhnChatActionsMenu").on("click", ".lhnWindow-basic .lhnChatActionsMenu", function(e){ lhnQuery(".lhnWindow-basic .lhnChatActions").toggle(); }); lhnQuery(document).off("click", ".lhnWindow-modern .lhnChatActionsMenu").on("click", ".lhnWindow-modern .lhnChatActionsMenu", function(e){ lhnQuery(".lhnWindow-modern .lhnChatActions").toggle(); }); lhnQuery(document).on("click", "#lhnHelpOutCenter, #lhnHelpOutCenter *", function(e){ if(!lhnQuery(e.target).is(".lhnChatActions, .lhnChatActions *, .lhnChatActionsMenu, .lhnChatActionsMenu *")){ lhnQuery(".lhnChatActions").hide(); } }); lhnQuery(document).off("click", ".lhnChatActions .lhnHocEndChatAction").on("click", ".lhnChatActions .lhnHocEndChatAction", function(e){ endChat(); lhnQuery(".lhnChatActions").hide(); return false; }); lhnQuery(document).off("click", ".lhnChatActions .lhnHocEmailAction").on("click", ".lhnChatActions .lhnHocEmailAction", function(e){ displayEmailForm(); lhnQuery(".lhnChatActions").hide(); return false; }); lhnQuery(document).off("click", ".lhnChat .hocEmailChat").on("click", ".lhnChat .hocEmailChat", function(e){ var email = lhnQuery(this).parent().find(".lhnHocEmailTo").val(); emailChat(email, lhnQuery(this).parent()); return false; }); opts.el = opts.el + " .lhnChat"; if(typeof opts.invite != 'undefined'){ var d = new Date(); var t = d.getHours() + ":" + ("0" + d.getMinutes()).slice(-2); var className = "lhnOperatorMessage lhnWindow-message--container"; var msg = checkMsgForVideoLinks(opts.invite); msg = convertUrlsAndImages(msg); var id = opts.invite_type == "proactive" ? opts.invite_id : "invite"; lhnQuery(".lhnChat").append("<div id='" + id + "' class='" + className + "'><span></span><div class=\"lhnWindow-message\">" + msg + "</div><span class=\"lhnTime\">" + t + "</span></div>"); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); if(opts.invite_type == "trigger"){ lhnQuery(".lhnChat").attr("invite", opts.invite_type + "_invite:" + opts.invite_id); }else{ lhnQuery(".lhnChat").attr("invite", opts.invite_type + "_invite"); } lhnQuery(".lhnWindow-chat_input > form").show(); setTimeout(function(){playSound();}, 800); }else{ if(!lhnStorage.getData("lhnShowedSMS") && (lhnQuery(".lhnPromptAccept.sms").attr("rel") != undefined && lhnQuery(".lhnPromptAccept.sms").attr("rel") != "") && isMobile()){ lhnQuery(".lhnPrompt.sms, .lhnPromptOverlay.sms").show(); }else{ fetchSubmittedJumpLogic(opts.win, opts); } } lhnQuery(".lhnPromptAccept.sms").click(function(){ if(typeof window.lhnJsSdkSmsChatShown == "function"){ window.lhnJsSdkSmsChatShown(); } window.location = "sms:" + lhnQuery(this).attr("rel"); }); lhnQuery(".lhnPromptDecline.sms").click(function(){ fetchSubmittedJumpLogic(opts.win, opts); lhnQuery(".lhnPrompt, .lhnPromptOverlay").hide(); lhnStorage.setData("lhnShowedSMS", true); }); }); } lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } function fetchSubmittedJumpLogic(win, opts){ ajaxCall(appurl + apiversion + '/chat/prechat_question/submitted', {view_id: win}, "GET", fetchSubmittedJumpLogicCallback, opts); } function fetchSubmittedJumpLogicCallback(data, opts){ if(typeof (data.payload) != "undefined"){ if(data.payload.messages != null){ if(typeof lhnJsSdk.fieldData == 'undefined'){ lhnJsSdk.fieldData = {}; } for(var m=0; m<data.payload.messages.length; m++){ lhnJsSdk.fieldData[data.payload.messages[m].crm] = data.payload.messages[m].answer; opts.jumplogic = JSON.parse(data.payload.messages[m].jump_logic); opts.value = data.payload.messages[m].answer; opts.fetch = false; var order = parseInt(data.payload.messages[m].field_info.split("_")[1]); lhnQuery(".lhnChat").append("<div class=\"lhnOperatorMessage lhnWindow-message--container\"><span></span><div class=\"lhnWindow-message\">" + jumpLogicTokenReplace(data.payload.messages[m].question) + "</div><span class=\"lhnTime\"></span></div>"); lhnQuery(".lhnChat").append("<div id='" + data.payload.messages[m].field_info + "' class=\"lhnCustomerMessage lhnWindow-message--container\" attr='" + order + "'><span></span><div class=\"lhnWindow-message\">" + data.payload.messages[m].answer + "</div><span class=\"lhnTime\"></span></div>"); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); if(m != data.payload.messages.length -1){opts.fetch = true;} submitPreChatQuestionCallback({}, opts); } }else{ fetchNextJumpLogic(opts.win, 1, opts); } } } function fetchNextJumpLogic(win, order, opts){ var data = { view_id: win, order: order }; if(lhnQuery("[id^=fld_" + order + "_]").length == 0){ ajaxCall(appurl + apiversion + '/chat/prechat_question', data, "GET", embedPreChatQuestionCallback, opts); } } function jumpLogicTokenReplace(html){ var regex = /{{(\d*)}}/g; var match = regex.exec(html); while(match != null){ var replace = lhnQuery(".lhnCustomerMessage[attr='" + match[1] + "'] .lhnWindow-message").text(); html = html.replace(match[0], replace); match = regex.exec(html); } return html; } function embedPreChatQuestionCallback(data, opts){ if(typeof (data.payload) != "undefined"){ chatTypingStatus({operator_typing: true}); setTimeout(function(){ chatTypingStatus({operator_typing: false}); var html = checkMsgForVideoLinks(data.payload.html); html = convertUrlsAndImages(html); html = jumpLogicTokenReplace(html); lhnQuery(html).appendTo("#" + opts.el); playSound(); if(lhnJsSdk.options.jumplogic.allow_messages == true && lhnJsSdk.isOnline){ lhnQuery(".lhnWindow-chat_input > form").show(); } lhnQuery(".lhnWindow-message--container:last-child .lhnInput").focus(); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); opts.jumplogic = JSON.parse(data.payload.jump_logic); lhnQuery(document).off("click", ".lhnChat .lhnOption").on("click", ".lhnChat .lhnOption", function(e){ lhnQuery(this).closest(".lhnFieldInput").hide(); var field_info = lhnQuery(this).closest(".lhnFieldInput").find("> input").attr("name"); submitPreChatQuestion(field_info, lhnQuery(this).attr("value"), lhnQuery(this).text(), lhnQuery(this).attr("crm"), opts); lhnQuery(document).off("click", ".lhnChat .lhnOption"); }); lhnQuery(document).off("click", ".lhnChat .jumplogic .lhnRadioGroup label > span").on("click", ".lhnChat .jumplogic .lhnRadioGroup label > span", function(e){ lhnQuery(this).closest(".lhnFieldInput").hide(); var field_info = lhnQuery(this).parent().find("> input").attr("name"); submitPreChatQuestion(field_info, lhnQuery(this).text(), lhnQuery(this).text(), lhnQuery(this).attr("crm"), opts); lhnQuery(document).off("click", ".lhnChat .jumplogic .lhnRadioGroup label > span"); }); lhnQuery(document).off("click", ".lhnChat .jumplogic .lhnSendButton").on("click", ".lhnChat .jumplogic .lhnSendButton", function (e) { if (validate()) { lhnQuery(this).parent().hide(); submitPreChatQuestion(lhnQuery(this).parent().find(".lhnInput").attr("name"), lhnQuery(this).parent().find(".lhnInput").val(), lhnQuery(this).parent().find(".lhnInput").val(), lhnQuery(this).parent().find(".lhnInput").attr("crm"), opts); lhnQuery(document).off("keyup", ".lhnChat .jumplogic .lhnInput"); lhnQuery(document).off("click", ".lhnChat .jumplogic .lhnSendButton"); lhnQuery(this).prop("disabled", "disabled"); e.preventDefault(); return false; } }); lhnQuery(document).off("keydown", ".lhnChat .jumplogic .lhnInput").on("keydown", ".lhnChat .jumplogic .lhnInput", function (e) { if (e.which == 13 || e.which == 9){ e.preventDefault(); return false; } }); lhnQuery(document).off("keyup", ".lhnChat .jumplogic .lhnInput").on("keyup", ".lhnChat .jumplogic .lhnInput", function (e) { if ((e.which == 13 || e.which == 9) && validate()) { lhnQuery(this).parent().hide(); submitPreChatQuestion(lhnQuery(this).attr("name"), lhnQuery(this).val(), lhnQuery(this).val(), lhnQuery(this).attr("crm"), opts); lhnQuery(document).off("keyup", ".lhnChat .jumplogic .lhnInput"); lhnQuery(document).off("click", ".lhnChat .jumplogic .lhnSendButton"); lhnQuery(this).prop("disabled", "disabled"); e.preventDefault(); return false; }else{ if (lhnQuery.trim(lhnQuery(this).val()) != "") { lhnQuery(this).parent().find("button").addClass("lhnShow"); }else{ lhnQuery(this).parent().find("button").removeClass("lhnShow"); } } }); lhnQuery(document).ready(function(){ autoFillForm("lhnChat", null, {}); if(data.payload.field_type == "19"){ $el = lhnQuery(".lhnOperatorMessage.jumplogic").last().find("label"); submitPreChatQuestion($el.attr("for"), "", "", $el.attr("crm"), opts); } }); }, 1000); } } function submitPreChatQuestion(field_info, value, text, crm, opts){ text = html2text(text); var data = {field_info: field_info, value: value}; opts.value = value; var crm_id = parseInt(field_info.split("_")[3]); var order = parseInt(field_info.split("_")[1]); if(crm_id == 28 && lhnQuery.trim(value) != ""){ custName = lhnQuery.trim(value); lhnStorage.setData("lhnCustName", custName); }else if(crm_id == 111 && lhnQuery.trim(value).split(" ")[0] != ""){ custName = lhnQuery.trim(value).split(" ")[0]; lhnStorage.setData("lhnCustName", custName); } if(typeof lhnJsSdk.fieldData == 'undefined'){lhnJsSdk.fieldData = {};} lhnJsSdk.fieldData[crm] = value; if(value != ""){ ajaxCall(appurl + apiversion + '/chat/prechat_question', data, "PUT", submitPreChatQuestionCallback, opts); }else{ submitPreChatQuestionCallback({}, opts); } text = checkMsgForVideoLinks(text); text = convertUrlsAndImages(text); if(value != ""){ lhnQuery(".lhnChat").append("<div id='" + field_info + "' class=\"lhnCustomerMessage lhnWindow-message--container\" attr='" + order + "'><span></span><div class=\"lhnWindow-message\">" + text + "</div><span class=\"lhnTime\"></span></div>"); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } if(typeof window.lhnJsSdkBotInputReceived == "function"){ var lhn_jl_label = lhnQuery.trim(lhnQuery("label[for='" + field_info + "'] p").text()); window.lhnJsSdkBotInputReceived(lhn_jl_label, value); } lhnJsSdk.vChan.push("jump_logic:message", {field_info: field_info, order: order, text: text}, 10000); } function submitPreChatQuestionCallback(data, opts){ if(typeof data.jwt != 'undefined' && data.jwt != null){ lhnStorage.setData("lhnJWT", data.jwt, data.jwt_expire); } var actions = null; var matched = false; var condition = null; for(var i = 0; i < opts.jumplogic.length; i++){ if(!matched){ var conditions = opts.jumplogic[i].conditions; if(conditions == null){ actions = opts.jumplogic[i].actions; }else{ for(var c = 0; c < conditions.length; c++){ condition = conditions[c]; matched = jumpLogicConditionCheck(condition, opts.value); if(!matched){ break; } } if(matched){ actions = opts.jumplogic[i].actions; } } } } parseAction(actions, 0, opts); } function jumpLogicConditionCheck(condition, value){ switch(Object.keys(condition)[0]){ case "selection": return condition["selection"] == value; break; case "is": return condition["is"] == value; break; case "isnot": return condition["isnot"] != value; break; case ">": return value > parseInt(condition[">"]); break; case ">=": return value >= parseInt(condition[">="]); break; case "<": return value < parseInt(condition["<"]); break; case "<=": return value <= parseInt(condition["<="]); break; case "contains": return value.indexOf(condition["contains"]) > -1; break; case "notcontains": return value.indexOf(condition["notcontains"]) < 0; break; case "online": return lhnJsSdk.isOnline == condition["online"]; break; case "regex": var pattern = new RegExp(condition["regex"], 'gi'); return pattern.test(value); break; case "current_page": return window.location.href.indexOf(condition["current_page"]) > -1; break; case 'previous_question': var prev_value = lhnQuery(".lhnCustomerMessage[attr='" + condition["previous_question"].question + "'] .lhnWindow-message").text(); var prev_matched = false; var prev_conditions = condition["previous_question"].conditions; for(var c = 0; c < prev_conditions.length; c++){ var prev_condition = prev_conditions[c]; prev_matched = jumpLogicConditionCheck(prev_condition, prev_value); if(!prev_matched){ break; } } return prev_matched; break; default: null; } } function parseAction(actions, i, opts){ var action_length = actions.length; var action = actions[i]; i = i+1; jl_working = true; switch(Object.keys(action)[0]){ case "goto": if(typeof opts.fetch == 'undefined' || (typeof opts.fetch != 'undefined' && opts.fetch != true)){ fetchNextJumpLogic(opts.win, action["goto"], opts); lhnJsSdk.vChan.push("jump_logic:new_question", {win: opts.win, goto: action["goto"], opts: opts}, 10000); } break; case "text": lhnQuery(".lhnChat").append("<div class=\"lhnOperatorMessage lhnWindow-message--container\"><span></span><div class=\"lhnWindow-message\">" + jumpLogicTokenReplace(action["text"]) + "</div><span class=\"lhnTime\"></span></div>"); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); break; case "close_window": lhnJsSdk.closeHOC(); break; case "start_chat": if(typeof opts.fetch == 'undefined' || (typeof opts.fetch != 'undefined' && opts.fetch != true)){ jumpLogicStartChat(opts); } break; case "end_chat": endChat(); break; case "dept": lhnJsSdk.options.dept = action["dept"]; ajaxCall(appurl + apiversion + '/visitor/update_dept', {dept: action["dept"]}, "POST", null, {}); lhnJsSdk.vChan.leave(); vchanConnect(); lhnJsSdk.vChan.push("jump_logic:dept", {dept: action["dept"]}, 10000); break; case "email": if(typeof opts.fetch == 'undefined' || (typeof opts.fetch != 'undefined' && opts.fetch != true)){ ajaxCall(appurl + apiversion + '/chat/0/email_transcript', action["email"], "POST", null, {}); } break; case "kb_article": lhnQuery(".lhnChat").append("<div class=\"lhnOperatorMessage lhnWindow-message--container\"><span></span><div class=\"lhnWindow-message\"><div id=\"lhnKbEmbed\"></div></div><span class=\"lhnTime\"></span></div>"); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); var lhnArticleId = action["kb_article"]; embedKbArticle(lhnArticleId, "lhnKbEmbed"); lhnQuery(document).ready(function(){ lhnQuery(document).on("click", "#lhnKbEmbed", function(){ if(lhnQuery(".lhnExternal").length < 1){ if(lhnJsSdk.isHOC){ var direction = lhnJsSdk.settings.styles.position; }else{ var direction = "right"; } (function (d, l, h, u) { var head = d.getElementsByTagName(h)[0]; var newCSS = d.createElement(l); newCSS.type = "text/css"; newCSS.rel = "stylesheet"; newCSS.href = u; head.appendChild(newCSS); }(document, 'link', 'head', appurl + "/css/modern/external.css")); lhnJsSdk.options.embedArticleDirection = typeof lhnJsSdk.options.embedArticleDirection == 'undefined' ? direction : lhnJsSdk.options.embedArticleDirection; lhnExternal = document.createElement("div"); lhnExternal.className = "lhnExternal standalone " + lhnJsSdk.options.embedArticleDirection; lhnExternal.style.display = "none"; if(isMobile()){ if(lhnJsSdk.options.embedArticleDirection == "right"){ lhnExternal.style.right = (lhnJsSdk.settings.general.hocWidth*-1) + "px"; }else{ lhnExternal.style.left = (lhnJsSdk.settings.general.hocWidth*-1) + "px"; } } lhnExternal.innerHTML = '<a href="#" class="lhnHocExternalClose">close</a><div class="lhnExternalContainer"></div>'; document.body.appendChild(lhnExternal); lhnQuery(document).ready(function(){ lhnQuery(document).on("click", ".lhnHocExternalClose", function(){ externalPageClose(); return false; }); lhnQuery(".lhnExternal.standalone").show(); }); } embedKbArticle(lhnArticleId, "lhnExternal"); }); }); break; case "callback": if(typeof opts.fetch == 'undefined' || (typeof opts.fetch != 'undefined' && opts.fetch != true)){ var cb = action["callback"]; lhnQuery(".lhnChat").append("<div rel=\"cb" + cb + "\" class=\"lhnWindow-message--container\"><div class=\"hocSecureForm\"><div class=\"form_chat_btn form_not_filled\">" + lhnJsSdk.dictionary.callbackTitle + "</div></div></div>"); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); lhnQuery("#hocSyschat").append("<div id=\"cb" + cb + "\" class=\"secure_forms\" style=\"display: none;\"><div class=\"form_close\"></div><div class=\"sf_main_form\"></div></div>"); embedCallback("cb" + cb + " .sf_main_form", cb); lhnQuery(document).ready(function(){ lhnQuery(document).on("click", "[rel='cb" + cb + "']", function(){ lhnQuery("#cb" + cb).show(); return false; }); lhnQuery(document).on("click", ".secure_forms .form_close", function(){ lhnQuery("#cb" + cb).hide(); return false; }); }); } break; case "push_visitor": if(typeof opts.fetch == 'undefined' || (typeof opts.fetch != 'undefined' && opts.fetch != true)){ ajaxCall(appurl + apiversion + '/visitor/push', {push_to: action["push_visitor"]}, "POST", null, {}); } break; case "secure_form": if(typeof opts.fetch == 'undefined' || (typeof opts.fetch != 'undefined' && opts.fetch != true)){ var msg = action["secure_form"]; var html = "<div id='sf" + i + "' class='lhnWindow-message--container'></div>"; lhnQuery(".lhnChat").append(html); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); loadSecureForms("sf"+i, msg, {prechat: true}); } break; case "delay": sleep(action["delay"]*1000).then(function() { if(i < action_length){ parseAction(actions, i, opts); } }); return false; break; case "custom_js": eval(action["custom_js"]); break; default: null; } if(i < action_length){ parseAction(actions, i, opts); }else{ jl_working = false; } lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } const sleep = function(milliseconds){ return new Promise(function(resolve){setTimeout(resolve, milliseconds);}); }; function jumplogic_chatended(data, opts){ if(chatType == "chat"){ closeHOC(); chatType = "prechat"; lhnQuery("#hocSyschat").html(''); firstOpen.chat = true; startSocketTimer(); } } function jumpLogicStartChat(opts){ if(typeof window.lhnJsSdkPreChatSubmitted == "function"){ window.lhnJsSdkPreChatSubmitted(); } if(lhnQuery(".lhnChat").attr("invite") != undefined && lhnQuery(".lhnChat").attr("invite") != ""){ motive = lhnQuery(".lhnChat").attr("invite"); doGaTrack("LiveChat", "Invite-Accepted", false); } var data = { view_id: opts.win, launch_url: lhnJsSdk.options.pageurl, custom1: lhnJsSdk.options.custom1, custom2: lhnJsSdk.options.custom2, custom3: lhnJsSdk.options.custom3, motive: motive, jumplogic: true }; if(typeof lhnJsSdk.options.operator_id != 'undefined'){ data.operator_id = lhnJsSdk.options.operator_id; } ajaxCall(appurl + apiversion + '/chat/create/', data, "POST", joinChatCallback, opts); } function embedPreChatCallback(data, opts) { if (typeof (data.message) != 'undefined' && data.message == "Department now offline"){ online_type = (lhnJsSdk.options.dept != 0) ? "department": "client"; updateOnlineStatus({chat: {online_status: false, online_type: online_type}, el: opts.el, win: opts.win}); return; } if(typeof (data.payload) != "undefined"){ if(data.payload == ""){ firstOpen.chat = false; embedChat(opts.el, opts.win, null); } else { lhnQuery("#hocSyschat").html(''); lhnQuery(data.payload.replace(/\r/g, "<br />")).appendTo("#" + opts.el); lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); lhnQuery(document).ready(function () { if(!lhnStorage.getData("lhnShowedSMS") && (lhnQuery(".lhnPromptAccept.sms").attr("rel") != undefined && lhnQuery(".lhnPromptAccept.sms").attr("rel") != "") && isMobile()){ lhnQuery(".lhnPrompt.sms, .lhnPromptOverlay.sms").show(); } lhnQuery(document).off("click", ".lhnSubmit.hocPrechat").on("click", ".lhnSubmit.hocPrechat", function () { validatePreChatForm(opts.el, opts.win); return false; }); lhnQuery(document).off("keypress", ".lhnPreChatForm input[type='text'], .lhnPreChatForm textarea").on("keypress", ".lhnPreChatForm input[type='text'], .lhnPreChatForm textarea", function (e) { if (e.keyCode == 13 && lhnQuery(".lhnHocOverlay").is(":visible")) { validatePreChatForm(opts.el, opts.win); return false; } }); lhnQuery(".lhnPromptAccept.sms").click(function(){ if(typeof window.lhnJsSdkSmsChatShown == "function"){ window.lhnJsSdkSmsChatShown(); } window.location = "sms:" + lhnQuery(this).attr("rel"); }); lhnQuery(".lhnPromptDecline.sms").click(function(){ lhnQuery(".lhnPrompt, .lhnPromptOverlay").hide(); lhnStorage.setData("lhnShowedSMS", true); }); lhnJsSdk.fieldData = typeof(lhnJsSdk.fieldData) != "undefined" ? lhnJsSdk.fieldData : (typeof(lhnJsSdk.preChatData) != "undefined" ? lhnJsSdk.preChatData : undefined); autoFillForm("lhnPreChatForm", validatePreChatForm, opts); lhnQuery(".lhnFormButton.hocPrechat").html(lhnJsSdk.dictionary.startChat); }); chatType = "prechat"; updateHeaderFooter("chat"); firstOpen.chat = false; doGaTrack("LiveChat", "Prechat-Survey", false); if(typeof window.lhnJsSdkPreChatShown == "function"){ window.lhnJsSdkPreChatShown(); } } } } function validatePreChatForm(el, win) { lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var isValid = validate(); if (isValid) { lhnQuery(".lhnPreChatForm input, .lhnPreChatForm textarea").each(function(){ var crm_id = parseInt(lhnQuery(this).attr("id").split("_")[3]); if(crm_id == 28 && lhnQuery.trim(lhnQuery(this).val()) != ""){ custName = html2text(lhnQuery.trim(lhnQuery(this).val())); lhnStorage.setData("lhnCustName", custName); return; }else if(crm_id == 111 && lhnQuery.trim(lhnQuery(this).val()).split(" ")[0] != ""){ custName = html2text(lhnQuery.trim(lhnQuery(this).val()).split(" ")[0]); lhnStorage.setData("lhnCustName", custName); } }); if(lhnJsSdk.lhnsocket == null){ connectSocket(); setTimeout(function(){ if(lhnJsSdk.isOnline == true){ embedChat(el, win, lhnQuery(".lhnPreChatForm form").serializeObject(null)); } }, 200); }else{ embedChat(el, win, lhnQuery(".lhnPreChatForm form").serializeObject(null)); } lhnQuery(".lhnPreChatForm").hide(); if(typeof window.lhnJsSdkPreChatSubmitted == "function"){ window.lhnJsSdkPreChatSubmitted(); } } else { lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } } function preChatErrorCallback(el) { lhnQuery("#lhnChatTable").remove(); lhnQuery(".lhnPreChatForm").show(); } function embedOfflineChatCallback(data, opts) { if(typeof (data.payload) != "undefined"){ lhnQuery("#hocSyschat").html(''); lhnQuery(data.payload).appendTo("#" + opts.el); lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); lhnQuery(document).ready(function () { lhnQuery(document).off("click", ".lhnSubmit.hocOffline").on("click", ".lhnSubmit.hocOffline", function () { validateOfflineChatForm(opts.el, opts.win); return false; }); lhnJsSdk.fieldData = typeof(lhnJsSdk.fieldData) != "undefined" ? lhnJsSdk.fieldData : (typeof(lhnJsSdk.preChatData) != "undefined" ? lhnJsSdk.preChatData : undefined); autoFillForm("lhnOfflineForm", validateOfflineChatForm, opts); lhnQuery(".lhnFormButton.hocOffline").html(lhnJsSdk.dictionary.submit); }); chatType = "offline"; updateHeaderFooter("chat"); firstOpen.chat = false; doGaTrack("LiveChat", "Offline-Form-Opened", false); autoFillForm("lhnOfflineForm", validateOfflineChatForm, opts); if(typeof window.lhnJsSdkOfflineShown == "function"){ window.lhnJsSdkOfflineShown(); } } } function validateOfflineChatForm(el, win) { lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var isValid = validate(); if (isValid) { var data = lhnQuery(".lhnOfflineForm form").serializeObject(win); var data = lhnQuery.extend(data, {department_id: lhnJsSdk.options.dept}); ajaxCall(appurl + apiversion + '/chat/offline', data, "PUT", validateOfflineFormCallback, { el: el }); } else { lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } } function validateOfflineFormCallback(data, opts){ if (typeof (data.message) != 'undefined') { lhnQuery("#" + opts.el + " .lhnOfflineForm").remove(); lhnQuery("#lhnHocFooter button").remove(); lhnQuery("<div class='lhnmsgbox lhnOfflineSuccess'>" + lb2br(data.message) + "</div>").appendTo("#" + opts.el); doGaTrack("LiveChat", "Offline-Form-Submitted", false); if(typeof window.lhnJsSdkOfflineSubmitted == "function"){ window.lhnJsSdkOfflineSubmitted(); } } lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); chatType = "prechat"; firstOpen.chat = true; } function embedChat(el, win, prechat) { lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var data = { system: "chat", layout: "hoc", partial: "conversation", view_id: win}; if(lhnJsSdk.chatSession){ data.args = {chat_session: lhnJsSdk.chatSession} } var opts = { el: el, win: win }; if(typeof prechat != 'undefined' && prechat != null){ opts.prechat = prechat; } ajaxCall(appurl + apiversion + '/ui/form/', data, "GET", embedChatCallback, opts); } function embedChatCallback(data, opts) { if (typeof (data.message) != 'undefined' && data.message == "Department now offline"){ var online_type = (lhnJsSdk.options.dept != 0) ? "department": "client"; updateOnlineStatus({chat: {online_status: false, online_type: online_type}, el: opts.el, win: opts.win}); return; } if (typeof (data.payload) != 'undefined' && lhnQuery(".lhnChat").length == 0) { lhnQuery(data.payload).appendTo("#" + opts.el); lhnQuery("#" + opts.el + " .lhnPromptMsg").hide(); lhnQuery("#" + opts.el + " .lhnPromptAccept.closechat").text(lhnJsSdk.dictionary.endChat); lhnQuery("#" + opts.el + " .lhnPromptDecline.closechat").text(lhnJsSdk.dictionary.hide); lhnQuery("#" + opts.el + " .lhnSendButton").text(lhnJsSdk.dictionary.send); lhnQuery("#" + opts.el + " .lhnChatActions .lhnHocEndChatAction").text(lhnJsSdk.dictionary.endChat); lhnQuery("#" + opts.el + " .lhnChatActions .lhnHocEmailAction").text(lhnJsSdk.dictionary.email); stopSocketTimer(); if(lhnQuery(".lhnHocBillboards").length > 0){ var slides = lhnQuery(".lhnHocBillboards").attr("data-cycle-slides"); var slide_count = lhnQuery(".lhnHocBillboards " + slides).length; var s = slide_count; lhnQuery(".lhnHocBillboards " + slides).each(function(){ if(s == slide_count){lhnQuery(this).addClass("lhnCurrentBillboard");} lhnQuery(this).css("z-index", s); s--; }); lhn_billboard_rotate = setInterval(function(){ lhnQuery(".lhnCurrentBillboard").fadeOut("slow", function(){ lhnQuery(this).css("z-index", 0); lhnQuery(this).removeClass("lhnCurrentBillboard"); if(lhnQuery(this).index() < slide_count-1){ lhnQuery(this).next().addClass("lhnCurrentBillboard"); }else{ lhnQuery(this).siblings().first().addClass("lhnCurrentBillboard"); } lhnQuery(this).show(); lhnQuery(".lhnHocBillboards " + slides).each(function(){ lhnQuery(this).css("z-index", parseInt(lhnQuery(this).css("z-index")) + 1); }); }); }, lhnQuery(".lhnHocBillboards").attr("data-cycle-timeout")); } if (lhnJsSdk.chatSession == null) { var data = { view_id: opts.win, launch_url: lhnJsSdk.options.pageurl, custom1: lhnJsSdk.options.custom1, custom2: lhnJsSdk.options.custom2, custom3: lhnJsSdk.options.custom3, motive: motive }; var options = { el: opts.el }; if(opts.prechat != 'undefined' && opts.prechat != null){ data.prechat = opts.prechat; options.errorCallback = preChatErrorCallback; } if(typeof lhnJsSdk.options.operator_id != 'undefined'){ data.operator_id = lhnJsSdk.options.operator_id; } if(!lhnStorage.getData("lhnShowedSMS") && isMobile() && lhnQuery(".lhnPrompt.sms").length > 0){ lhnQuery(".lhnPrompt.sms, .lhnPromptOverlay.sms").show(); }else{ ajaxCall(appurl + apiversion + '/chat/create/', data, "POST", joinChatCallback, options); } lhnQuery(document).ready(function(){ lhnQuery(".lhnPromptAccept.sms").click(function(){ if(typeof window.lhnJsSdkSmsChatShown == "function"){ window.lhnJsSdkSmsChatShown(); } window.location = "sms:" + lhnQuery(this).attr("rel"); }); lhnQuery(".lhnPromptDecline.sms").click(function(){ lhnQuery(".lhnPrompt, .lhnPromptOverlay").hide(); lhnStorage.setData("lhnShowedSMS", true); ajaxCall(appurl + apiversion + '/chat/create/', data, "POST", joinChatCallback, options); }); }); } else { joinChatCallback({ "payload": {}}, opts); } firstOpen.chat = false; } chatType = "chat"; updateHeaderFooter("chat"); lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } function joinChatCallback(data, opts) { if(typeof data.jwt != 'undefined' && data.jwt != null){ lhnStorage.setData("lhnJWT", data.jwt, data.jwt_expire); } if (typeof (data.payload) != 'undefined' && (lhnJsSdk.chatSession || typeof (data.payload.chat_session_id) != 'undefined')) { lhnQuery(".lhnPreChatForm").remove(); lhnQuery(".lhnWindow-chat_input > form").show(); if(!lhnJsSdk.chatSession){ lhnJsSdk.chatSession = data.payload.chat_session_id; if(lhnJsSdk.isHOC == false){ lhnStorage.setData("lhnChatSession", lhnJsSdk.chatSession, (60*5)); } doGaTrack("LiveChat", "Chat-Started", false); if(typeof window.lhnJsSdkChatStarted == "function"){ window.lhnJsSdkChatStarted(); } if(typeof(data.payload.operator) != 'undefined'){ lhnQuery(".lhnOperatorName").text(data.payload.operator.name); lhnQuery(".lhnOperatorDesc").text(data.payload.operator.description); lhnQuery(".lhnWindow-header h4").html("<span class=\"lhnAgentStatus lhnAgentStatus--active\"></span>" + data.payload.operator.name); if(data.payload.operator.image != ''){ lhnQuery(".lhnOperatorImage, .lhnWindow-header-avatar--img").addClass("hasImage"); lhnQuery(".lhnOperatorImage, .lhnWindow-header-avatar--img").html('<img src="' + data.payload.operator.image + '" />'); }else{ lhnQuery(".lhnOperatorImage, .lhnWindow-header-avatar--img").removeClass("hasImage"); } } /*args = {session: chatSession, message_type: 3, message_sub_type: 5, from_name: ""}; chatMsgSent(lhnJsSdk.settings.chatSystemMessages.waiting_to_connect, args);*/ } joinChatSessionCallback(); var nameSize = 12; var borderRadius = 5; lhnQuery(document).ready(function () { if(lhnQuery(".lhnHocBillboards").length > 0){ lhnQuery("#hocSyschat.lhnHocSection").addClass("hasBillboard"); } lhnQuery(".lhnCustomerMessage > div, .lhnOperatorMessage > div").css("border-radius", borderRadius + "px"); lhnQuery(".lhnCustomerMessage > span, .lhnOperatorMessage > span").css("font-size", nameSize + "px"); lhnQuery(document).on("keyup", "#lhnChatMessageBox > textarea", function (e) { if (e.keyCode == 13 && lhnQuery.trim(lhnQuery(this).val()) != "") { if(custName != null){opts.from_name = custName;} chatMsgSent(lhnQuery.trim(lhnQuery(this).val()), opts); e.preventDefault(); return false; }else if(e.keyCode == 13){ e.preventDefault(); return false; }else if(lhnQuery(this).val().length >= 4000){ e.preventDefault(); return false; } if(lhnQuery.trim(lhnQuery(this).val()).length > 0){ lhnQuery("#hocSyschat").addClass("lhnTextboxActive"); }else{ lhnQuery("#hocSyschat").removeClass("lhnTextboxActive"); } }); lhnQuery(document).on("keyup", "#lhnChatMessageBox > textarea", function (e) { var oldCustomerTyping = isCustomerTyping; if (lhnQuery.trim(lhnQuery(this).val()) != "") { var data = true; isCustomerTyping = true; lhnQuery(".lhnInput-chat_input-buttons .lhnSendButton").addClass("lhnShow"); } else { var data = false; isCustomerTyping = false; lhnQuery(".lhnInput-chat_input-buttons .lhnSendButton").removeClass("lhnShow"); } if(oldCustomerTyping != isCustomerTyping && lhnJsSdk.chatSession != null){ ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/set_typing_status/', {status: data}, "POST", null, {}); } lhnJsSdk.chatChan.push("visitor_typing:capture", {visitor_text: lhnQuery.trim(lhnQuery(this).val())}, lhnJsSdk.chatSession); }); lhnQuery(document).on("click", ".lhnSendButton", function(){ if(lhnQuery.trim(lhnQuery("#lhnChatMessageBox > textarea").val()) != ""){ if(custName != null){opts.from_name = custName;} chatMsgSent(lhnQuery.trim(lhnQuery("#lhnChatMessageBox > textarea").val()), opts); } return false; }); lhnQuery(document).off("click", ".lhnWindow-basic .lhnChatActionsMenu").on("click", ".lhnWindow-basic .lhnChatActionsMenu", function(e){ lhnQuery(".lhnWindow-basic .lhnChatActions").toggle(); }); lhnQuery(document).off("click", ".lhnWindow-modern .lhnChatActionsMenu").on("click", ".lhnWindow-modern .lhnChatActionsMenu", function(e){ lhnQuery(".lhnWindow-modern .lhnChatActions").toggle(); }); lhnQuery(document).on("click", "#lhnHelpOutCenter, #lhnHelpOutCenter *", function(e){ if(!lhnQuery(e.target).is(".lhnChatActions, .lhnChatActions *, .lhnChatActionsMenu, .lhnChatActionsMenu *")){ lhnQuery(".lhnChatActions").hide(); } }); lhnQuery(document).off("click", ".lhnChatActions .lhnHocEndChatAction").on("click", ".lhnChatActions .lhnHocEndChatAction", function(e){ endChat(); lhnQuery(".lhnChatActions").hide(); return false; }); lhnQuery(document).off("click", ".lhnChatActions .lhnHocEmailAction").on("click", ".lhnChatActions .lhnHocEmailAction", function(e){ displayEmailForm(); lhnQuery(".lhnChatActions").hide(); return false; }); lhnQuery(document).off("click", ".lhnChat .hocEmailChat").on("click", ".lhnChat .hocEmailChat", function(e){ var email = lhnQuery(this).parent().find(".lhnHocEmailTo").val(); emailChat(email, lhnQuery(this).parent()); return false; }); lhnQuery(document).off("change", ".lhnHocFileUpload").on("change", ".lhnHocFileUpload", function (evt) { var filename = lhnQuery(this).val().substring(lhnQuery(this).val().lastIndexOf("\\")+1); var reader = new FileReader(); var el = lhnQuery(this); reader.onload = function(readerEvt){ log("Chat File Data", filename + ";" + readerEvt.total + ";" + readerEvt.target.result); lhnQuery(el).parent().find(".lhnHocFileUploadData").val(filename + ";" + readerEvt.total + ";" + readerEvt.target.result); lhnQuery(el).parent().find(".hocSendFileUpload").show(); }; reader.readAsDataURL(evt.target.files[0]); }); lhnQuery(document).off("click", ".lhnChat .hocSendFileUpload").on("click", ".lhnChat .hocSendFileUpload", function(e){ if(lhnQuery(this).parent().find(".lhnHocFileUploadData").val() != ""){ lhnQuery(this).parent().find("button").hide(); uploadFile(lhnQuery(this).parent().find(".lhnHocFileUploadData").val(), lhnQuery(this).parent()); var data = { message_id: lhnQuery(this).parent().attr("id") }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/ack/', data, "POST", null, {}); return false; }else{ alert("no file selected"); return false; } }); lhnQuery(document).on("click", ".lhnChat .hocCancelFileUpload", function(e){ lhnQuery(this).parent().remove(); var data = { message_id: lhnQuery(this).parent().attr("id") }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/ack/', data, "POST", null, {}); return false; }); lhnQuery(document).on("click", ".lhnChat .hocRemoteAssistAccept", function(e){ var serviceType = lhnQuery(this).closest(".hocRemoteAssist").attr("rel"); var data = { message: "<span style='display:none;'>-Desktop-Sharing-Accept-" + serviceType + "</span>", message_type: 1, message_sub_type: 55 }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/message/', data, "POST", null, {}); var data = { message_id: lhnQuery(this).parent().attr("id") }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/ack/', data, "POST", null, {}); lhnQuery(this).parent().remove(); return false; }); lhnQuery(document).on("click", ".lhnChat .hocRemoteAssistDecline", function(e){ var data = { message: "Desktop sharing session invitation has been declined by the visitor.", message_type: 1, message_sub_type: 56 }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/message/', data, "POST", null, {}); var data = { message_id: lhnQuery(this).parent().attr("id") }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/ack/', data, "POST", null, {}); lhnQuery(this).parent().remove(); return false; }); lhnQuery(document).on("click", ".lhnChat .hocChatTimeoutAccept", function(e){ var data = { message: "Chat timeout has been accepted by the visitor.", message_type: 1, message_sub_type: 145 }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/message/', data, "POST", null, {}); lhnJsSdk.isOnline = false; chatSurveyId = 0; chatType = "timeout"; endChat(); updateEmbeddedChat(); return false; }); lhnQuery(document).on("click", ".lhnChat .hocChatTimeoutDecline", function(e){ var data = { message: "Chat timeout has been declined by the visitor.", message_type: 1, message_sub_type: 146 }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/message/', data, "POST", null, {}); lhnQuery(this).parent().remove(); return false; }); lhnQuery(document).on("click", "#lhnHelpOutCenter #hocSyschat .form_close", function(e){ var formId = lhnQuery(this).closest('.secure_forms').attr('id'); lhnQuery('#hocSyschat').find('[rel="' + formId + '"]').each(function () { if (lhnQuery(this).hasClass('success')) { var data = { message_id: lhnQuery(this).closest('.lhnWindow-message--container').attr("id") }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/ack/', data, "POST", null, {}); } lhnQuery('#' + formId).remove(); }); return false; }); lhnQuery(".lhnChat").scroll(function() { var pos = lhnQuery(".lhnChat").scrollTop(); if (pos <= 300 && moreMessages && !isLoadingMessages) { isLoadingMessages = true; var data = {limit: 15, ending_message_id: firstMessageId}; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/history/', data, "GET", moreChatMessagesCallback, {}); } }); lhnQuery("#lhnChatMessageBox .message").attr("placeholder", lhnJsSdk.dictionary.chatBoxPlaceholder); }); if(typeof(opts.new_message) != 'undefined'){ chatMsgSent(lhnQuery.trim(opts.new_message), opts); } } } function joinChatSession(){ if(lhnQuery("#hocSyschat").html() == "" && lhnQuery(".lhnChat").length == 0){ lhnQuery.each(lhnJsSdk.settings.systems, function(k){ if(lhnQuery(this)[0].system == "chat"){ generateHocContents(lhnQuery(this)[0].system); } }); }else{ joinChatSessionCallback(); } } function joinChatSessionCallback(){ if(typeof(lhnJsSdk.chatChan) == 'undefined' || lhnJsSdk.chatChan == null){ isFocused = setInterval(function() {checkFocus()}, 1000); if(typeof(lhnJsSdk.lhnsocket) == 'undefined' || lhnJsSdk.lhnsocket == null){ connectSocket(); } lhnJsSdk.chatChan = lhnJsSdk.lhnsocket.channel("chat_session:" + lhnJsSdk.chatSession, { "token": lhnStorage.getData("lhnJWT"), "last_message_id": null }); lhnJsSdk.chatChan.on("message:received", function (payload) { chatMsgReceived(payload); lhnJsSdk.chatChan.params["last_message_id"] = payload.visitor_chat_session.id; }); lhnJsSdk.chatChan.on("message:status", function (payload) { lhnQuery("#" + payload.message_id + " .lhnStatus").text(payload.status); }); lhnJsSdk.chatChan.on("typing_status:changed", function (payload) { chatTypingStatus(payload); }); lhnJsSdk.chatChan.on("bus:status", function (payload){ if(payload.status.name == "changed" && payload.status.type == "operator"){ lhnQuery(".lhnOperatorName").text(payload.metadata.name); lhnQuery(".lhnOperatorDesc").text(payload.metadata.description); lhnQuery(".lhnWindow-header h4").html("<span class=\"lhnAgentStatus lhnAgentStatus--active\"></span>" + payload.metadata.name); if(payload.metadata.image != '' && payload.metadata.image != null){ lhnQuery(".lhnOperatorImage, .lhnWindow-header-avatar--img").addClass("hasImage"); lhnQuery(".lhnOperatorImage, .lhnWindow-header-avatar--img").html('<img src="' + payload.metadata.image + '" />'); }else{ lhnQuery(".lhnOperatorImage, .lhnWindow-header-avatar--img").removeClass("hasImage"); } }else if(payload.status.name == "timeout" && payload.status.type == "chat"){ chatTimeout(payload.message); }else if(payload.status.name == "closed" && payload.status.type == "chat"){ chatEnded(); } }); lhnJsSdk.chatChan.join().receive("ok", function (payload) { lhnJsSdk.log("Joined Channel", "chat_session:" + lhnJsSdk.chatSession); initChatMsgReceived(payload, {}); if (payload.messages.length > 0) { moreMessages = payload.more_messages; lhnJsSdk.chatChan.params["last_message_id"] = payload.messages[payload.messages.length - 1].messageId; } }).receive("error", function(payload){ if(payload.response == "Invalid Chat Session"){ chatSurveyId = null; chatEnded(); } }); lhnJsSdk.chatChan.onClose(function(){ lhnJsSdk.log("chat channel closed", lhnJsSdk.chatSession); lhnSendError("chat channel closed - " + lhnJsSdk.chatSession); }); } } function moreChatMessagesCallback(data){ moreMessages = data.payload.more_messages; historyChatMsgReceived(data.payload); } function showInvite(message, delay, play_alert, type, opts){ if(lhnJsSdk.isHOC == true){ type = typeof(type) != 'undefined' ? type : "manual"; opts = typeof(opts) != 'undefined' ? opts : {}; var jl_type = typeof opts.type != 'undefined' ? opts.type : "message"; if((preChatType == "jump_logic" && jl_type == "message" || lhnJsSdk.options.invite_as_chat == true) && type != "promo" && (!isMobile() || type == "proactive")){ if(started_jump_logic != true){ setTimeout(function(){ openHOC('c', {invite: message, invite_type: type, invite_id: opts}); doGaTrack("LiveChat", "Invite-Shown", false); ajaxCall(appurl + apiversion + '/visitor/invite', {}, "DELETE", null, {}); }, delay * 1000); } }else if(jl_type == "jump_logic" && type == "auto" && !isMobile()){ openHOC('c'); doGaTrack("LiveChat", "Invite-Shown", false); ajaxCall(appurl + apiversion + '/visitor/invite', {}, "DELETE", null, {}); }else if(jl_type == "jump_logic" && type == "auto" && isMobile()){ return false; }else{ if(lhnJsSdk.settings.button == "slide"){ setTimeout(function(){ lhnQuery("#lhnHocButton").addClass("lhndown"); setTimeout(function(){ lhnQuery("#lhnHocButton").hide(); }, 1500); }, Math.max((delay * 1000) - 1500, 0)); } setTimeout(function(){ (function (d, b, e) { var hocInviteHtml = '<div class="lhnHocInviteCont">'; hocInviteHtml += '<div id="lhnOpMsg" class="lhnMsg">' + message + '</div>'; hocInviteHtml += '<div class="lhnHocInviteButtons">'; if(type == "promo"){ hocInviteHtml += '<div class="lhnHocInviteButton lhncancel" tabindex="0">' + lhnJsSdk.dictionary.inviteCancel + '</div>'; }else{ hocInviteHtml += '<div class="lhnHocInviteButton lhncancel" tabindex="0">' + lhnJsSdk.dictionary.inviteCancel + '</div>'; hocInviteHtml += '<div class="lhnHocInviteButton lhnstart" tabindex="0">' + lhnJsSdk.dictionary.inviteStart + '</div>'; } hocInviteHtml += '<div class="lhnHocButtonClear"></div>'; hocInviteHtml += '</div>'; hocInviteHtml += '</div>'; var lhndiv = d.getElementsByTagName(b); lhndiv = d.createElement(e); lhndiv.id = "lhnHocInvite"; lhndiv.className = "lhn" + lhnJsSdk.settings.styles.button_position + " lhn_" + type; lhndiv.innerHTML = hocInviteHtml; lhndiv.style.display = "none"; d.body.appendChild(lhndiv); }(document, 'body', 'div')); if(typeof opts != 'undefined'){ lhnQuery("#lhnHocInvite").attr("rel", opts); } if(play_alert){ playSound(); } lhnQuery("#lhnHocInvite").show(); doGaTrack("LiveChat", "Invite-Shown", false); ajaxCall(appurl + apiversion + '/visitor/invite', {}, "DELETE", null, {}); }, delay * 1000); } } if(typeof window.lhnJsSdkInviteReceived == "function" && type != "chat"){ window.lhnJsSdkInviteReceived(message, delay, type); } } function hideInvite(){ lhnQuery("#lhnHocInvite").addClass("lhncancel"); setTimeout(function(){ lhnQuery("#lhnHocInvite").hide(); lhnQuery("#lhnHocInvite").remove(); }, 1500); if(lhnJsSdk.settings.button == "slide"){ setTimeout(function(){ lhnQuery("#lhnHocButton").show(); lhnQuery("#lhnHocButton").removeClass("lhndown"); }, 1500); } } function displayEmailForm(){ var html = '<div class="conversationForm hocEmail lhnWindow-message--container">'; html += lhnJsSdk.dictionary.emailTranscript + ':<br />'; html += '<input type="text" class="lhnHocEmailTo" />'; html += '<button class="hocEmailChat">' + lhnJsSdk.dictionary.send + '</button>'; html += '</div>'; lhnQuery(".lhnChat").append(html); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } function emailChat(email, el){ var data = { email_address: email }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/email_transcript/', data, "POST", emailChatCallback, {el: el, email: email}); } function emailChatCallback(payload, opts){ lhnJsSdk.log("Email", "Send successfully"); lhnQuery(opts.el).html(lhnJsSdk.dictionary.emailSuccess + " " + opts.email); } function displayFileUpload(id){ var html = '<div id="'+id+'" class="conversationForm hocFileUpload lhnWindow-message--container">'; html += lhnJsSdk.dictionary.uploadFile + ':<br />'; html += '<input type="file" class="lhnHocFileUpload" />'; html += '<input type="hidden" class="lhnHocFileUploadData" />'; html += '<button class="hocSendFileUpload">Upload</button>'; html += '<button class="hocCancelFileUpload">Decline</button>'; html += '</div>'; lhnQuery(".lhnChat").append(html); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } function uploadFile(fileData, el){ var file = fileData.split(";"); var data = { name: file[0], length: file[1], data: file[2] + ";" + file[3], from_name: custName }; ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/upload_file/', data, "POST", uploadFileCallback, {el: el}); } function uploadFileCallback(payload, opts){ lhnJsSdk.log("File", "Upload successful"); lhnQuery(opts.el).html(lhnJsSdk.dictionary.uploadFileSuccess); chatMsgSentCallback(payload, opts); } function displayRemoteAssistance(id, serviceType){ var html = '<div id="'+id+'" class="conversationForm hocRemoteAssist lhnWindow-message--container" rel="' + serviceType + '">'; html += lhnJsSdk.dictionary.remoteAssistance + ':<br />'; html += '<button class="hocRemoteAssistAccept">Accepts</button>'; html += '<button class="hocRemoteAssistDecline">Decline</button>'; html += '</div>'; lhnQuery(".lhnChat").append(html); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } function loadSecureForms(id, mes, opts) { opts = typeof opts == 'undefined' ? {} : opts; if (typeof (LHN_Forms) == "undefined" && !formsWorking) { formsWorking = true; lhnQuery.getScript(baseurl + 'js/internal/lhn-common.min.js').done(function () { lhnQuery.getScript(baseurl + 'Scripts/forms.js').done(function () { top.LHN_Forms = LHN_Forms; LHN_Forms.secureForms.properties.windowType = "HOC"; LHN_Forms.secureForms.properties.systemId = opts.systemId || 1; LHN_Forms.secureForms.properties.prechat = opts.prechat || false; LHN_Forms.secureForms.properties.contextId = JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).resource.id; LHN_Forms.secureForms.properties.departmentId = lhnJsSdk.options.dept; LHN_Forms.secureForms.properties.visitorName = custName; LHN_Forms.properties.clientId = lhnJsSdk.setup.account; LHN_Forms.properties.jwtToken = lhnStorage.getData("lhnJWT"); LHN_Forms.secureForms.loadForm(LHN_Forms.properties.clientId, {}, 1, function () { loadSecureForm(id, mes); formsWorking = false; }); }); }); } else { loadSecureForm(id, mes); } } function loadSecureForm(id, mes){ if(formsWorking) { setTimeout(function(){loadSecureForm(id, mes);}, 500); }else{ var html = '<div class="hocSecureForm">'; html += LHN_Forms.secureForms.findAndConvertCommands(mes, 1); html += '</div>'; lhnQuery("#" + id).append(html); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } } function checkMsgForTenor(msg) { if(msg.indexOf('s://media.tenor.co/images/') > -1) { msg = msg.replace(/(^|[^"'])(https?:\/\/\S*(png|jpg|jpeg|gif|raw))([\s<]|$)/gi, '$1<div class=lhngif><img src=\"$2\" /><div class=lhncredit>via Tenor</div></div>$4'); } return msg; } function checkMsgForVideoLinks(msg) { if (msg.indexOf('youtu') > -1 || msg.indexOf('vimeo.com/') > -1) { var r = /(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(groups\/(.*?)\/videos\/|channels\/(.*?)\/|video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/gi; } msg = msg.replace(r, function (a, b, c, d, e, f, g, h, i) { var text = ""; if (d.indexOf('youtu') > -1 && i!='user' && i!='oembed' && i!='attribution_link' && i!='playlist') { text = '<iframe width="200" height="113" src="https://www.youtube.com/embed/' + i + '?rel=0&amp;showinfo=0" frameborder="0" allowfullscreen></iframe>'; }else if (d.indexOf('vimeo.com') > -1) { text = '<iframe src="https://player.vimeo.com/video/' + i + '?title=0&byline=0&portrait=0" width="200" height="120" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>'; }else { text = a; } return text; }); return msg; } function checkMsgForLinks(msg){ var emailPattern = /[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}/g; var matched_str = msg.match(emailPattern); if(matched_str){ lhnQuery.each(matched_str, function(i, v){ msg = msg.replace(v, "<a href=\"mailto:" + v + "\">" + v + "</a>"); }); } return msg; } function endChat(){ if(!lhnJsSdk.chatSession && preChatType == "jump_logic"){ ajaxCall(appurl + apiversion + '/chat/jumplogic/terminate/', {}, "POST", jumplogic_chatended, {}); lhnJsSdk.vChan.push("jump_logic:ended", {}, 10000); }else{ ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/terminate/', {}, "POST", chatEnded, {}); } } function chatEnded(){ clearInterval(isFocused); if(chatSurveyId != null && chatSurveyId != 0){ lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var id = lhnQuery(".lhnChat").parent().attr("id"); embedSurvey(id, chatSurveyId, lhnJsSdk.chatSession); }else{ if(typeof window.lhnJsSdkChatEnded == "function"){ window.lhnJsSdkChatEnded(lhnJsSdk.chatSession); } if(chatType == "chat"){ closeHOC(); chatType = "prechat"; lhnQuery("#hocSyschat").html(''); firstOpen.chat = true; } } if(typeof lhn_billboard_rotate != "undefined"){ clearInterval(lhn_billboard_rotate); } lhnQuery("#hocSyschat").removeClass("hasBillboard"); lhnJsSdk.chatChan.leave().receive("ok", function () { lhnJsSdk.chatSession = null; lhnStorage.removeData("lhnChatSession"); lhnJsSdk.chatChan = null; custName = null; }); if (lhnJsSdk.isHOC == true) { lhnJsSdk.settings.systems[hoc_chat_order].active_chat_session_id = null; } lhnStorage.removeData("lhnShowedSMS"); startSocketTimer(); } function chatTimeout(message){ html = '<div class="conversationForm hocChatTimeout lhnWindow-message--container">'; html += message + '<br />'; html += '<button class="hocChatTimeoutAccept">Accepts</button>'; html += '<button class="hocChatTimeoutDecline">Decline</button>'; html += '</div>'; lhnQuery(".lhnChat").append(html); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); if(typeof window.lhnJsSdkChatTimeout == "function"){ window.lhnJsSdkChatTimeout(message); } } function initChatMsgReceived(payload, opts) { if(typeof (payload.messages) != "undefined"){ if(typeof payload.chat_fields != 'undefined' && payload.chat_fields != null && lhnQuery(".lhnOperatorMessage.jumplogic").length < 1 && opts.type != 'prepend'){ for(var c = 0; c < payload.chat_fields.length; c++){ var order = parseInt(payload.chat_fields[c].field_info.split("_")[1]); lhnQuery(".lhnChat").append("<div class=\"lhnOperatorMessage lhnWindow-message--container\"><span></span><div class=\"lhnWindow-message\">" + jumpLogicTokenReplace(payload.chat_fields[c].question) + "</div><span class=\"lhnTime\"></span></div>"); lhnQuery(".lhnChat").append("<div id='" + payload.chat_fields[c].field_info + "' class=\"lhnCustomerMessage lhnWindow-message--container\" attr='" + order + "'><span></span><div class=\"lhnWindow-message\">" + payload.chat_fields[c].answer + "</div><span class=\"lhnTime\"></span></div>"); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } } for (var m = 0; m < payload.messages.length; m++) { var message = payload.messages[m]; if(m == 0){ firstMessageId = message.messageId; } if(lhnQuery(".lhnChatMessageContainer #" + message.messageId).length < 1){ switch (message.messageType) { case 1: className = "lhnSystemMessage lhnWindow-message--container"; fromName = ""; break; case 3: switch(message.messageSubType){ case 5: className = "lhnSystemMessage lhnWindow-message--container"; fromName = ""; break; default: className = message.operatorId == 0 ? "lhnCustomerMessage lhnWindow-message--container" : "lhnOperatorMessage lhnWindow-message--container"; fromName = message.fromName; break; } } var timestamp = message.createdTime; var local_timestamp = convertTime(timestamp); opts.status = message.messageStatus; insertMessage(message.messageId, className, fromName, message.chatMessage, local_timestamp, opts); } } } isLoadingMessages = false; } function historyChatMsgReceived(payload) { if(typeof (payload.messages) != "undefined"){ payload.messages = payload.messages.reverse(); initChatMsgReceived(payload, {type: "prepend"}); if(typeof payload.chat_fields != 'undefined' && payload.chat_fields != null && lhnQuery(".lhnOperatorMessage.jumplogic").length < 1){ for(var c = 0; c < payload.chat_fields.length; c++){ var order = parseInt(payload.chat_fields[c].field_info.split("_")[1]); lhnQuery(".lhnChat").prepend("<div id='" + payload.chat_fields[c].field_info + "' class=\"lhnCustomerMessage lhnWindow-message--container\" attr='" + order + "'><span></span><div class=\"lhnWindow-message\">" + payload.chat_fields[c].answer + "</div><span class=\"lhnTime\"></span></div>"); lhnQuery(".lhnChat").prepend("<div class=\"lhnOperatorMessage lhnWindow-message--container\"><span></span><div class=\"lhnWindow-message\">" + jumpLogicTokenReplace(payload.chat_fields[c].question) + "</div><span class=\"lhnTime\"></span></div>"); } } } } function checkFocus() { if (document.hasFocus() == true && (lhnQuery("#lhnHelpOutCenter").css("visibility") == "visible")) { lhnQuery(".lhnOperatorMessage[status!=read], .lhnSystemMessage[status!=read]").each(function() { if (lhnQuery.isNumeric(lhnQuery(this).attr("id")) == true) { ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/message_status/', {status: "read", message_id: lhnQuery(this).attr("id")}, "POST", null, {}); lhnQuery(".lhnChat #" + lhnQuery(this).attr("id")).attr("status", "read"); } }); } else { lhnQuery(".lhnOperatorMessage, .lhnSystemMessage").not("[status='delivered'],[status='read']").each(function() { if (lhnQuery.isNumeric(lhnQuery(this).attr("id")) == true) { ajaxCall(appurl + apiversion + '/chat/' + lhnJsSdk.chatSession + '/message_status/', {status: "delivered", message_id: lhnQuery(this).attr("id")}, "POST", null, {}); lhnQuery(".lhnChat #" + lhnQuery(this).attr("id")).attr("status", "delivered"); } }); } } function chatMsgReceived(payload) { if (typeof (payload.visitor_chat_session) != "undefined") { if(lhnQuery(".lhnChat #" + payload.visitor_chat_session.id).length < 1){ var messageClass = "lhnOperatorMessage lhnWindow-message--container"; var messageType = "operator"; if(payload.visitor_chat_session.message_type == 1 || (payload.visitor_chat_session.message_type == 3 && payload.visitor_chat_session.message_sub_type == 5)){ messageClass = "lhnSystemMessage lhnWindow-message--container"; messageType = "system"; }else if(payload.visitor_chat_session.operator_id == 0){ messageClass = "lhnCustomerMessage lhnWindow-message--container"; messageType = "customer"; } var timestamp = payload.visitor_chat_session.created_time; var local_timestamp = convertTime(timestamp); insertMessage(payload.visitor_chat_session.id, messageClass, payload.visitor_chat_session.from_name, payload.visitor_chat_session.chat_message, local_timestamp); if(typeof window.lhnJsSdkChatNewMessage == "function"){ window.lhnJsSdkChatNewMessage(payload.visitor_chat_session.id, payload.visitor_chat_session.chat_message, messageType); } if(lhnJsSdk.isHOC == true && (parseInt(lhnQuery("#lhnHelpOutCenter").css(lhnJsSdk.settings.styles.position)) < 0 || !lhnQuery("#hocSyschat").hasClass("hocactive") || lhnQuery("#lhnHelpOutCenter").css("visibility") == "hidden")){ openHOC('c'); } playSound(); lhnQuery(".lhnQueueInfo").fadeOut("slow"); lhnQuery(".lhnQueueInfo").text(""); lhnQuery(".lhnOperatorInfo .lhnOperatorStatus").removeClass("queued"); lhnQuery(".lhnAgentStatus").addClass("lhnAgentStatus--active"); } } } function insertMessage(id, className, fromName, msg, timestamp, opts){ opts = typeof(opts) != "undefined" ? opts : {}; if(lhnQuery("#hocSyschat").html() == ""){ embedChat(); } var d = new Date(timestamp); var t = d.getHours() + ":" + ("0" + d.getMinutes()).slice(-2); msg = lhnQuery.trim(msg); msg = checkMsgForTenor(msg); msg = checkMsgForVideoLinks(msg); msg = checkMsgForLinks(msg); if(msg.indexOf("{\"/set_language") == 0){ msg = msg.replace(/\//i, ''); var json = eval('('+msg+')'); operLanguageId = json.set_language[0].oper; custLanguageId = json.set_language[1].cust; }else if(msg == "/file_request"){ displayFileUpload(id); }else if(msg.indexOf("/desktop_sharing") > -1){ if (msg.indexOf("joinme") > -1) { displayRemoteAssistance(id, "joinme"); } else if (msg.indexOf("zoom") > -1) { displayRemoteAssistance(id, "zoom"); } }else if(msg.indexOf("{\"/send_secure_form") == 0){ var html = "<div id='" + id + "' class='lhnWindow-message--container'></div>"; if(opts.type != undefined && opts.type == "prepend"){ lhnQuery(".lhnChat").prepend(html); }else{ lhnQuery(".lhnChat").append(html); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } loadSecureForms(id, msg); }else if(msg.indexOf("/session_ended") !== -1){ chatEnded(); }else{ if(lhnQuery(".lhnChat #" + id).length < 1){ msg = convertUrlsAndImages(msg); html = "<div id='" + id + "' class='" + className + "' status='" + (opts.status || "") + "'><span>" + fromName + "</span><div class=\"lhnWindow-message\">" + msg + "</div><span class=\"lhnTime\">" + t + "</span><span class=\"lhnStatus\"></span></div>"; if(opts.type != undefined && opts.type == "prepend"){ lhnQuery(".lhnChat").prepend(html); }else{ lhnQuery(".lhnChat").append(html); setTimeout(function(){lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight)},800); } } } } function proactiveMsgReceived(payload){ if (typeof (payload.visitor_chat_session) != "undefined") { showInvite(payload.visitor_chat_session.chat_message, 1, true, "proactive", payload.visitor_chat_session.id); var data = { message: "Proactive invitation shown", message_type: 1, message_sub_type: 135 }; chatSessionId = (lhnJsSdk.chatSession == null) ? 0 : lhnJsSdk.chatSession; ajaxCall(appurl + apiversion + '/chat/' + chatSessionId + '/message/', data, "POST", null, {}); var data = { invite_type: "proactive", department_id: lhnJsSdk.options.dept, operator_id: payload.operator.id }; ajaxCall(appurl + apiversion + '/analytics/chat/invite_tracking', data, "POST", null, {}); } } function triggerMsgReceived(payload){ if (typeof (payload.visitor_chat_session) != "undefined" && typeof payload.trigger != 'undefined' && typeof payload.trigger.delay != 'undefined') { showInvite(payload.visitor_chat_session.chat_message, payload.trigger.delay, true, "trigger", payload.trigger.id); lhnJsSdk.trigger_timeout = setTimeout(function(){ hideInvite(); var data = { message: "Trigger invitation dismissed", message_type: 1, message_sub_type: 138 }; chatSessionId = (lhnJsSdk.chatSession == null) ? 0 : lhnJsSdk.chatSession; ajaxCall(appurl + apiversion + '/chat/' + chatSessionId + '/message/', data, "POST", null, {}); }, 30000+(payload.trigger.delay * 1000)); var data = { message: "Trigger invitation shown", message_type: 1, message_sub_type: 139 }; chatSessionId = (lhnJsSdk.chatSession == null) ? 0 : lhnJsSdk.chatSession; ajaxCall(appurl + apiversion + '/chat/' + chatSessionId + '/message/', data, "POST", null, {}); var data = { invite_type: "trigger" }; ajaxCall(appurl + apiversion + '/analytics/chat/invite_tracking', data, "POST", null, {}); } } function triggerPromoReceived(payload){ if (typeof (payload.visitor_chat_session) != "undefined" && typeof payload.trigger != 'undefined' && typeof payload.trigger.delay != 'undefined') { if(typeof lhnPromo == "function"){ lhnPromo(payload.visitor_chat_session.chat_message); }else{ showInvite(payload.visitor_chat_session.chat_message, payload.trigger.delay, true, "promo", payload.trigger.id); var data = { message: "Trigger promo shown", message_type: 1, message_sub_type: 156 }; chatSessionId = (lhnJsSdk.chatSession == null) ? 0 : lhnJsSdk.chatSession; ajaxCall(appurl + apiversion + '/chat/' + chatSessionId + '/message/', data, "POST", null, {}); } } } function updateQueueStatus(payload){ lhnQuery(".lhnQueueInfo").text(payload.visitor_chat_session.chat_message); lhnQuery(".lhnQueueInfo").fadeIn("slow"); lhnQuery(".lhnOperatorInfo .lhnOperatorStatus").addClass("queued"); lhnQuery(".lhnAgentStatus").removeClass("lhnAgentStatus--active"); } function chatMsgSent(msg, opts) { lhnQuery("#lhnChatMessageBox > textarea").val(''); lhnQuery(".lhnSendButton").removeClass("lhnShow"); lhnQuery("#hocSyschat").removeClass("lhnTextboxActive"); /* msg = msg.replace(/(?:^|[^"'>])(https?:\/\/.*\.(?:png|jpg|jpeg|gif))/gi, " <a href=\"$1\" target=\"_blank\"><img src=\"$1\" /></a><br />$1");*/ /* msg = msg.replace(/(?:^|[^"'>])(https?:\/\/\S[^< ]*)/gi, " <a href=\"$1\" target=\"_blank\">$1</a>");*/ msg = html2text(msg); var data = {message: msg}; if(typeof(opts.message_type) != 'undefined'){ data.message_type = opts.message_type; } if(typeof(opts.message_sub_type) != 'undefined'){ data.message_sub_type = opts.message_sub_type; } if(typeof(opts.from_name) != 'undefined'){ data.from_name = opts.from_name; } chatSessionId = (lhnJsSdk.chatSession == null) ? 0 : lhnJsSdk.chatSession; if(operLanguageId != "" && custLanguageId != "" && operLanguageId != custLanguageId){ data.message_sub_type = 76; data.cust_lang = custLanguageId; data.oper_lang = operLanguageId; ajaxCall(appurl + apiversion + '/chat/' + chatSessionId + '/message/', data, "POST", chatMsgSentCallback, {}); }else{ ajaxCall(appurl + apiversion + '/chat/' + chatSessionId + '/message/', data, "POST", chatMsgSentCallback, {}); } } function chatMsgSentCallback(data, opts){ if(typeof data.payload.messageId && lhnQuery(".lhnChat #" + data.payload.messageId).length < 1 && lhnQuery(".lhnChat").length > 0){ var timestamp = data.payload.createdTime; var local_timestamp = convertTime(timestamp); var d = new Date(local_timestamp); var t = d.getHours() + ":" + ("0" + d.getMinutes()).slice(-2); var className = "lhnCustomerMessage lhnWindow-message--container"; if(data.payload.fromName == ""){ className = "lhnSystemMessage lhnWindow-message--container"; } var msg = checkMsgForVideoLinks(data.payload.chatMessage); msg = convertUrlsAndImages(msg); lhnQuery(".lhnChat").append("<div id='" + data.payload.messageId + "' class='" + className + "'><span>" + data.payload.fromName + "</span><div class=\"lhnWindow-message\">" + msg + "</div><span class=\"lhnTime\">" + t + "</span></div>"); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); if(typeof window.lhnJsSdkChatNewMessage == "function"){ window.lhnJsSdkChatNewMessage(data.payload.messageId, msg, "customer"); } } } function chatTypingStatus(payload) { if (typeof (payload.operator_typing) != 'undefined') { isOperatorTyping = (payload.operator_typing == true || payload.operator_typing == "true"); if(isOperatorTyping && !lhnQuery("#lhnOperatorTyping").is(":visible")){ lhnQuery("#lhnHocButton #lhnOpType").show(); lhnQuery(".lhnChat").append("<div id='lhnOperatorTyping' class='lhnOperatorMessage lhnWindow-message--container'><span></span><div class='lhnWindow-message'><div class='lhnTypingDot'></div><div class='lhnTypingDot'></div><div class='lhnTypingDot'></div></div></div>"); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); }else if(!isOperatorTyping){ lhnQuery("#lhnHocButton #lhnOpType").hide(); lhnQuery(".lhnChat #lhnOperatorTyping").remove(); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } } } function playSound(){ if(lhnJsSdk.options.sound != ""){ (function (d, a, s) { var lhnaudio = d.createElement(a); lhnaudio.setAttribute("controls",''); lhnaudio.setAttribute('autoplay', ''); lhnaudio.id = "lhnHocBellSound"; lhnaudio.style.position = "absolute"; lhnaudio.style.left = "-300px"; lhnaudio.style.top = "-300px"; lhnaudio.style.width = "0"; lhnaudio.style.height = "0"; lhnaudio.visible = "false"; var lhnaudioSource = document.createElement(s); lhnaudioSource.src = lhnJsSdk.options.sound + "?rnd=" + (Math.floor(Math.random() * 1000)); lhnaudioSource.type="audio/wav"; lhnaudio.appendChild(lhnaudioSource); d.body.appendChild(lhnaudio); }(document, 'audio', 'source')); } setTimeout(function(){ lhnQuery("#lhnHocBellSound").remove(); }, 5000); } function embedSurvey(el, id, link_id){ var data = { system: "survey", layout: "hoc", partial: "form", view_id: id }; ajaxCall(appurl + apiversion + '/ui/form/', data, "GET", embedSurveyCallback, {el: el, id: link_id}); } function embedSurveyCallback(data, opts){ if (typeof data.payload != 'undefined') { chatType = "survey"; updateHeaderFooter("chat"); lhnQuery("#" + opts.el).html(''); lhnQuery(data.payload).appendTo("#" + opts.el); lhnQuery(document).ready(function () { lhnQuery(document).on("click", ".lhnRadioGroup span", function(){ if(!lhnQuery(this).hasClass("selected")){ lhnQuery(this).closest(".lhnRadioGroup").find("span").removeClass("lhnSelected"); lhnQuery(this).addClass("lhnSelected"); lhnQuery(this).closest(".lhnRadioGroup").find("input").prop("checked", false); lhnQuery(this).parent().find("input").prop("checked", true); } }); lhnQuery(document).off("click", ".lhnSubmit.hocSurvey").on("click", ".lhnSubmit.hocSurvey", function () { validateSurveyForm(opts.el, opts.win, opts.id); return false; }); lhnQuery(".lhnFormButton.hocSurvey").html(lhnJsSdk.dictionary.submit); }); lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); doGaTrack("Survey", "Form-Opened", false); firstOpen.chat = true; if(typeof window.lhnJsSdkSurveyShown == "function"){ window.lhnJsSdkSurveyShown(); } } } function validateSurveyForm(el, win, id){ lhnQuery(document).off("click", ".lhnSubmit.hocSurvey"); lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var isValid = true; lhnQuery(".lhnField.lhnrating").each(function () { if (lhnQuery("input[name='"+lhnQuery(this).find("input[type='radio']").first().attr("name")+"']").is(":checked") != true) { isValid = false; } }); if (isValid) { var data = lhnQuery(".lhnSurveyForm form").serializeObject(win); data.survey_id = chatSurveyId; data.link_id = id; ajaxCall(appurl + apiversion + '/survey/', data, "PUT", validateSurveyFormCallback, { el: el, chat_session: id }); } else { lhnQuery(document).on("click", ".lhnSubmit.hocSurvey", function () { validateSurveyForm(opts.el, opts.win, opts.id); return false; }); alert("Please answer all questions"); lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } } function validateSurveyFormCallback(data, opts) { if (typeof data.message != 'undefined') { lhnQuery("#" + opts.el + " .lhnSurveyForm").remove(); lhnQuery("<div class='lhnmsgbox lhnSurveySuccess'>" + lb2br(data.message) + "</div>").appendTo("#" + opts.el); chatType = "prechat"; doGaTrack("Survey", "Form-Submitted", false); if(typeof window.lhnJsSdkSurveySubmitted == "function"){ window.lhnJsSdkSurveySubmitted(); } } if(typeof window.lhnJsSdkChatEnded == "function"){ window.lhnJsSdkChatEnded(opts.chat_session); } lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } function embedKbLookup(el, win) { lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var data= { system: "kb", layout: "hoc", partial: "search", view_id: win }; ajaxCall(appurl + apiversion + '/ui/form/', data, "GET", embedKbLookupCallback, { el: el}); } function embedKbLookupCallback(data, opts) { if (typeof data.payload != 'undefined') { lhnQuery(data.payload).appendTo("#" + opts.el); lhnQuery("#txtKeyword").attr("placeholder", lhnJsSdk.dictionary.knowledgeSearch); var direction = lhnJsSdk.isHOC == true ? lhnJsSdk.settings.styles.position : "right"; if(lhnJsSdk.options.embedArticle){ /*opts.el != "hocSysknowledge" && */ (function (d, l, h, u) { var head = d.getElementsByTagName(h)[0]; var newCSS = d.createElement(l); newCSS.type = "text/css"; newCSS.rel = "stylesheet"; newCSS.href = u; head.appendChild(newCSS); }(document, 'link', 'head', appurl + "/css/modern/external.css")); lhnJsSdk.options.embedArticleDirection = typeof lhnJsSdk.options.embedArticleDirection == 'undefined' ? direction : lhnJsSdk.options.embedArticleDirection; var lhnExternal = document.createElement("div"); lhnExternal.className = "lhnExternal standalone " + lhnJsSdk.options.embedArticleDirection; lhnExternal.style.display = "none"; if(isMobile()){ if(lhnJsSdk.options.embedArticleDirection == "right"){ lhnExternal.style.right = (lhnJsSdk.settings.general.hocWidth*-1) + "px"; }else{ lhnExternal.style.left = (lhnJsSdk.settings.general.hocWidth*-1) + "px"; } } lhnExternal.innerHTML = '<a href="#" class="lhnHocExternalClose">close</a><div class="lhnExternalContainer"></div>'; document.body.appendChild(lhnExternal); lhnQuery(document).ready(function(){ lhnQuery(document).on("click", ".lhnHocExternalClose", function(){ externalPageClose(); return false; }); lhnQuery(document).on("click", "#searchResultsContainer .lhn_result a", function(e){ e.preventDefault(); embedKbArticle(lhnQuery(this).attr("rel"), "lhnExternal"); }); lhnQuery(".lhnExternal.standalone").show(); }); } var args = { searchBox: lhnQuery('#txtKeyword'), resultsContainerNode: lhnQuery('#searchResultsContainer'), categories: lhnJsSdk.options.kb_categories || null }; wireKbLookup(args); firstOpen.knowledge = false; } lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } function wireKbLookup(args){ (function (d, s, type, src) { var script = d.createElement(s); script.setAttribute("type", type); script.setAttribute("src", src); d.getElementsByTagName('head')[0].appendChild(script); }(document, "script", "text/javascript", appurl + "/js/kb/jquery-jqote2.js")); (function (d, s, type, src) { var script = d.createElement(s); script.setAttribute("type", type); script.setAttribute("src", src); d.getElementsByTagName('head')[0].appendChild(script); }(document, "script", "text/javascript", appurl + "/js/kb/lhn-localization-1.0.0.js")); (function (d, s, type, src) { var script = d.createElement(s); script.setAttribute("type", type); script.setAttribute("src", src); var done = false; script.onload = script.onreadystatechange = function () { if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) { done = true; var opts = { clientID: lhnJsSdk.setup.account, url: appurl + apiversion + "/kb/article/search/", JWT: lhnStorage.getData("lhnJWT") }; if(args !== undefined){ lhnQuery.extend(opts, args); } typeahead = new lhnQuery.typeahead(opts); if(typeof lhnJsSdk.search_term != "undefined"){ typeahead.searchBox.val(lhnJsSdk.search_term); typeahead.searchBox.keyup(); }else if(lhnJsSdk.isHOC){ getKbTopArticles(); } } }; d.getElementsByTagName('head')[0].appendChild(script); }(document, "script", "text/javascript", appurl + "/js/kb/lhn-typeahead-1.0.0.js")); } function getKbTopArticles(){ var data = {category_ids: lhnJsSdk.options.kb_categories || null}; ajaxCall(appurl + apiversion + '/kb/articles/top/', data, "GET", getKbTopArticleCallback, {}); } function getKbTopArticleCallback(data){ if (typeof data.payload != "undefined") { var lhnArticles = data.payload.entries; for(var a=0;a<lhnArticles.length;a++){ var lhnArticle = lhnArticles[a]; var lhnArticleRating = lhnArticle.vote_total/lhnArticle.vote_count; var lhnRating = ""; for ( var i = 0; i < 5; i ++ ) { if ( lhnArticleRating - i >= 1 ) { lhnRating = lhnRating + '<img src="//www.livehelpnow.net/lhn/images/global/rating14.gif"/>'; } else if ( lhnArticleRating - i > 0 ) { lhnRating = lhnRating + '<img src="//www.livehelpnow.net/lhn/images/global/rating14_half.gif"/>'; } else { lhnRating = lhnRating + '<img src="//www.livehelpnow.net/lhn/images/global/rating14_empty.gif"/>'; } } var lhnArticleLink = data.payload.links[a].html.show; lhnQuery('<div class="lhn_result"><div class="lhn_content"><div class="lhn_content_header"><a target="_blank" rel="'+ lhnArticle.article_id +'" href="'+lhnArticleLink+'">'+ stripToSize(lhnArticle.question, 200) + (lhnArticle.question.lnegth > 200 ? "..." : "") +'</a></div><div class="lhn_content_body">' + stripToSize(lhnArticle.answer, 200) + (lhnArticle.answer.length > 200 ? "..." : "") + '</div><div class="lhn_content_footer"><div class="lhn_views">'+ lhnArticle.view_count +' views</div><div class="lhn_ratings">' + lhnRating + '</div></div></div></div>').appendTo("#searchResultsContainer .results"); } } } function embedKbArticle(id, el) { var data = { system: "kb", layout: "jssdk", partial: "show", args: {} }; ajaxCall(appurl + apiversion + '/ui/kb/article/' + id, data, "GET", embedKbArticleCallback, { el: el }); } function embedKbArticleCallback(data, opts) { var html = ""; if (typeof data.payload != "undefined") { html = data.payload; } if (opts.el == "lhnExternal") { externalPage(html); } else { lhnQuery("#"+opts.el).html(html); } } function embedTicket(el, win) { lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var data = { system: "ticket", layout: "hoc", partial: "form", view_id: win }; ajaxCall(appurl + apiversion + '/ui/form/', data, "GET", embedTicketCallback, {el: el}); } function embedTicketCallback(data, opts) { if (typeof data.payload != "undefined") { lhnQuery("#" + opts.el).html(''); (function (d, s, type, src) { var script = d.createElement(s); script.setAttribute("type", type); script.setAttribute("src", src); d.getElementsByTagName('head')[0].appendChild(script); }(document, "script", "text/javascript", baseurl + "Scripts/jquery.scrollTo.js")); lhnQuery(data.payload).appendTo("#" + opts.el); firstOpen.ticket = false; lhnQuery(document).ready(function () { /*lhnQuery(".datepicker").datepicker();*/ /*TODO: Add datepicker ability*/ lhnQuery("input[type='file']").change(function (evt) { var field_id = lhnQuery(this).attr("id"); var filename = lhnQuery(this).val().substring(lhnQuery(this).val().lastIndexOf("\\")+1); var reader = new FileReader(); reader.onload = function (readerEvt) { fileData = filename + ";" + readerEvt.total + ";" + readerEvt.target.result; var file = fileData.split(";"); var data = { name: file[0], length: file[1], data: file[2] + ";" + file[3], from_name: custName }; ajaxCall(appurl + apiversion + '/attachment/ticket/', data, "PUT", formFileUploadCallback, {field_id: field_id}); }; reader.readAsDataURL(evt.target.files[0]); }); lhnQuery(document).on("click", ".lhnSubmit.hocTicket", function () { validateTicketForm(opts.el, opts.win); return false; }); lhnQuery(".lhnFormButton.hocTicket").html(lhnJsSdk.dictionary.submit); autoFillForm("lhnTicketForm", validateTicketForm, opts); }); } lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } function formFileUploadCallback(data, opts){ if (typeof data.payload != "undefined") { var filedata_id = opts.field_id.replace("filename", "filedata"); var fld_id = opts.field_id.replace("filename", "fld"); lhnQuery("#" + filedata_id).val(data.payload.attachment_id); lhnQuery("#" + fld_id).val(data.payload.url); } } function validateTicketForm(el, win) { lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var isValid = validate(); if (isValid) { ajaxCall(appurl + apiversion + '/ticket/', {fields: lhnQuery(".lhnTicketForm form").serializeObject(win)}, "PUT", validateTicketFormCallback, { el: el }); } else { lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } } function validateTicketFormCallback(data, opts) { if (typeof data.payload != "undefined" && typeof (data.message) != 'undefined') { lhnQuery("#" + opts.el + " .lhnTicketForm").remove(); lhnQuery("<div class='lhnmsgbox lhnTicketSuccess'>" + data.message.replace("###ticketid###", data.payload.ticket_id) + "</div>").appendTo("#" + opts.el); firstOpen.ticket = true; } lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); lhnQuery(".lightpick").hide(); } function embedCallback(el, win) { lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var data = { system: "callback", layout: "hoc", partial: "form", view_id: win }; ajaxCall(appurl + apiversion + '/ui/form/', data, "GET", embedCallbackCallback, { el: el, win: win }); } function embedCallbackCallback(data, opts) { if (typeof data.payload != "undefined") { lhnQuery("#" + opts.el).html(''); (function (d, s, type, src) { var script = d.createElement(s); script.setAttribute("type", type); script.setAttribute("src", src); d.getElementsByTagName('head')[0].appendChild(script); }(document, "script", "text/javascript", baseurl + "Scripts/jquery.scrollTo.js")); lhnQuery(data.payload).appendTo("#" + opts.el); firstOpen.callback = false; lhnQuery(document).ready(function () { lhnQuery(document).off("click", ".lhnSubmit.hocCallback").on("click", ".lhnSubmit.hocCallback", function () { validateCallForm(opts.el, opts.win); return false; }); autoFillForm("lhnCallbackForm", validateCallForm, opts); lhnQuery(".lhnFormButton.hocCallback").html(lhnJsSdk.dictionary.submit); }); doGaTrack("Callback", "Form-Opened", false); if(typeof window.lhnJsSdkCallbackShown == "function"){ window.lhnJsSdkCallbackShown(); } } else if (data && typeof data.status != "undefined" && data.status == "error") {; lhnQuery("#" + opts.el + " .lhnmsgbox").remove(); lhnQuery("<div class='error'>" + data.error + "</div>").appendTo("#" + opts.el); } lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } function validateCallForm(el, win) { lhnQuery(".lhnHocOverlay").show(); lhnQuery(".lhnloading").show(); var isValid = validate(); if (isValid) { var data = {}; data.fields = lhnQuery(".lhnCallbackForm form").serializeObject(win); data.current_page = lhnJsSdk.options.pageurl; ajaxCall(appurl + apiversion + '/callback/', data, "PUT", validateCallFormCallback, {el: el, win: win}); } else { lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } } function validateCallFormCallback(data, opts) { if (typeof data.payload != "undefined" && typeof (data.message) != 'undefined') { lhnQuery("#" + opts.el + " .lhnCallbackForm").remove(); lhnQuery("<div class='lhnmsgbox lhnCallbackSuccess'>" + data.message + "</div>").appendTo("#" + opts.el); firstOpen.callback = true; doGaTrack("Callback", "Form-Submitted", false); if(typeof window.lhnJsSdkCallbackSubmitted == "function"){ window.lhnJsSdkCallbackSubmitted(); } if(typeof opts.win != 'undefined'){ lhnQuery("[rel='cb" + opts.win + "']").remove(); setTimeout(function(){ lhnQuery("#cb" + opts.win + " .form_close").click(); }, 3000); } } lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); } function openHOC(tab, opts) { if (!isWorking && typeof lhnJsSdk.settings.general != 'undefined') { isWorking = true; activeTab = activeTab == null ? systems_long[lhnJsSdk.settings.systems["1"].system] : activeTab; tab = typeof (tab) == 'undefined' ? activeTab : tab; tab = systems[tab]; if(typeof opts != "undefined" && typeof opts.search_term != "undefined"){ lhnJsSdk.search_term = opts.search_term; } var validTab = switchHocTab(tab, opts); if(validTab){ lhnQuery('#lhnHelpOutCenter').addClass('lhnActive'); isWorking = false; if(typeof(lhnJsSdk.options.hideButtonWhenOpen) != 'undefined' && lhnJsSdk.options.hideButtonWhenOpen == true){ if(lhnJsSdk.settings.button == "slide"){ lhnQuery("#lhnHocButton").addClass("lhndown"); setTimeout(function(){ lhnQuery("#lhnHocButton").hide(); }, 1000); }else{ lhnQuery("#lhnHocButton").hide(); } } if(typeof window.lhnJsSdkEmbeddedOpened == "function"){ window.lhnJsSdkEmbeddedOpened(); } }else{ isWorking = false; } } return false; } function closeHOC() { if (typeof lhnJsSdk.settings.general != 'undefined') { lhnQuery('#lhnHelpOutCenter').removeClass('lhnActive'); if(lhnJsSdk.settings.button == "slide"){ setTimeout(function(){ lhnQuery("#lhnHocButton").show(); lhnQuery("#lhnHocButton").removeClass("lhndown"); }, 500); }else{ lhnQuery("#lhnHocButton").show(); } if(typeof window.lhnJsSdkEmbeddedClosed == "function"){ window.lhnJsSdkEmbeddedClosed(); } } } function switchHocTab(t, opts) { var order = lhnQuery(".lhnHocTab[systemtype='" + t + "']").attr("systemorder"); log("tab system type", t); log("tab order", order); lhnQuery.each(systems, function(k, v){ if(v == t){ activeTab = k; } }); if(order === undefined){ lhnJsSdk.log("HOC Error", "Invalid HOC Tab"); return false; } if (firstOpen[t]) { if(lhnJsSdk.settings.systems[order].system == "chat"){ lhnJsSdk.settings.chatSystemMessages = lhnJsSdk.settings.systems[order].messages; hoc_chat_order = order; } generateHocContents(lhnJsSdk.settings.systems[order].system, opts); }else if(t == "knowledge" && typeof(lhnJsSdk.search_term) != "undefined"){ typeahead.searchBox.val(lhnJsSdk.search_term); typeahead.searchBox.keyup(); } updateHeaderFooter(lhnJsSdk.settings.systems[order].system); lhnQuery(".lhnHocSection.hocactive").removeClass("hocactive"); lhnQuery(".lhnHocSection[systemtype='" + t + "']").addClass("hocactive"); lhnQuery(".lhnHocTab.hocactive").removeClass("hocactive"); lhnQuery(".lhnHocTab[systemtype='" + t + "']").addClass("hocactive"); return true; } function updateHeaderFooter(sys){ if(lhnJsSdk.isHOC == true) { clearInterval(poweredByInterval); poweredByInterval = setInterval(function(){ if(lhnQuery(".lhnHocPoweredBy a").attr("href") != lhnJsSdk.settings.poweredby.link){ lhnQuery(".lhnHocPoweredBy a").html(lhnJsSdk.settings.poweredby.text); lhnQuery(".lhnHocPoweredBy a").attr("href", lhnJsSdk.settings.poweredby.link); } }, 5000); lhnQuery("#lhnHocFooter, #lhnWindowFooter").html(""); lhnQuery("#lhnHocFooter, #lhnWindowFooter").hide(); /*lhnQuery(".lhnHocChatClose, .lhnWindow-header-closer").hide();*/ lhnQuery(".lhnWindow-header-avatar").hide(); lhnQuery(".lhnWindow-header-text").removeClass("lhnWindow-chat"); lhnQuery(".lhnWindow-header-text h4").html(""); var poweredby = '<div class="lhnHocPoweredBy">Powered by <a href="'+lhnJsSdk.settings.poweredby.link+'" target="_blank">'+lhnJsSdk.settings.poweredby.text+'</a></div>'; switch (sys) { case "chat": if(chatType == "prechat"){ lhnQuery("#lhnHocHeader span").text(lhnJsSdk.dictionary.newChatTitle); lhnQuery("#lhnHocFooter").html("<button class='lhnSubmit hocPrechat'>"+lhnJsSdk.dictionary.startChat+"</button>"); lhnQuery("#lhnHocFooter, #lhnWindowFooter").show(); }else if(chatType == "offline"){ lhnQuery("#lhnHocHeader span").text(lhnJsSdk.dictionary.offlineTitle); lhnQuery("#lhnHocFooter").html("<button class='lhnSubmit hocOffline'>"+lhnJsSdk.dictionary.submit+"</button>"); lhnQuery("#lhnHocFooter, #lhnWindowFooter").show(); }else if(chatType == "survey"){ lhnQuery("#lhnHocHeader span").text(lhnJsSdk.dictionary.surveyTitle); lhnQuery("#lhnHocFooter").html("<button class='lhnSubmit hocSurvey'>"+lhnJsSdk.dictionary.submit+"</button>"); lhnQuery("#lhnHocFooter, #lhnWindowFooter").show(); /*lhnQuery(".lhnHocChatClose").hide();*/ }else{ lhnQuery("#lhnHocHeader span").text(lhnJsSdk.dictionary.chatTitle); lhnQuery("#lhnHocFooter").html("<div id='lhnChatMessageBox'><div class='lhnSendButton'>"+lhnJsSdk.dictionary.send+"</div><textarea></textarea><div class='lhnChatActions'><a href='#' class='lhnHocEndChatAction' title='"+lhnJsSdk.dictionary.endChat+"'>"+lhnJsSdk.dictionary.endChat+"</a><a href='#' class='lhnHocEmailAction' title='"+lhnJsSdk.dictionary.email+"'>"+lhnJsSdk.dictionary.email+"</a></div><div class='lhnChatActionsMenu' title='view chat action items'>&nbsp;</div></div>"); lhnQuery("#lhnHocFooter, #lhnWindowFooter").show(); /*lhnQuery(".lhnHocChatClose, .lhnWindow-header-closer").show();*/ lhnQuery(".lhnWindow-header-avatar").show(); lhnQuery(".lhnWindow-header-text").addClass("lhnWindow-chat"); lhnQuery(".lhnWindow-header-text h4").html("<span class=\"lhnAgentStatus\"></span> " + lhnJsSdk.dictionary.agentConnecting); if(lhnQuery(".lhnOperatorInfo .lhnOperatorName").text().trim() != ""){ lhnQuery(".lhnWindow-header-text h4").html("<span class=\"lhnAgentStatus lhnAgentStatus--active\"></span> " + lhnQuery(".lhnOperatorInfo .lhnOperatorName").text()); } if(lhnQuery(".lhnOperatorInfo .lhnOperatorImage.hasImage").length > 0){ lhnQuery(".lhnWindow-header-avatar--img").html(lhnQuery(".lhnOperatorInfo .lhnOperatorImage.hasImage").html()); } } break; case "ticket": lhnQuery("#lhnHocHeader span").text(lhnJsSdk.dictionary.ticketTitle); lhnQuery("#lhnHocFooter").html("<button class='lhnSubmit hocTicket'>"+lhnJsSdk.dictionary.submit+"</button>"); lhnQuery("#lhnHocFooter, #lhnWindowFooter").show(); break; case "knowledge": lhnQuery("#lhnHocHeader span").text(lhnJsSdk.dictionary.knowledgeTitle); lhnQuery("#lhnHocFooter, #lhnWindowFooter").show(); break; case "callback": lhnQuery("#lhnHocHeader span").text(lhnJsSdk.dictionary.callbackTitle); lhnQuery("#lhnHocFooter").html("<button class='lhnSubmit hocCallback'>"+lhnJsSdk.dictionary.submit+"</button>"); lhnQuery("#lhnHocFooter, #lhnWindowFooter").show(); break; } lhnQuery("#lhnHocFooter, #lhnWindowFooter").append(poweredby); } } function autoFillForm(form, validate_function, opts){ if(typeof lhnJsSdk.fieldData != 'undefined'){ lhnQuery.each(lhnJsSdk.fieldData, function(k, v){ if(k.substring(k.length - 9, k.length) == "_readonly"){ k = k.substring(0, k.length - 9); lhnQuery("." + form + " [crm='"+k+"']").attr("readonly", "readonly"); } lhnQuery("." + form + " [crm='"+k+"']").val(v); lhnQuery("." + form + " [crm='"+k+"']").parent().find(".lhnSendButton").addClass("lhnShow"); }); if(typeof lhnJsSdk.fieldData.auto_submit != 'undefined' && lhnJsSdk.fieldData.auto_submit == true && validate_function != null){ validate_function(opts.el, opts.win); } } } function externalPage(html) { var pattern = new RegExp("^https?:"); if(pattern.test(html)){ html = "<iframe src='" + html + "'></iframe>"; } lhnQuery(".lhnExternalContainer").html(html); externalPageOpen(); } function externalPageOpen() { if(lhnQuery(".lhnExternal").hasClass("standalone")){ var position = lhnJsSdk.options.embedArticleDirection; var width = lhnQuery(".lhnExternal.standalone").width(); }else{ var position = lhnJsSdk.settings.styles.position; var width = lhnJsSdk.settings.general.hocWidth; } if (parseInt(lhnQuery(".lhnExternal").css(position)) < 0) { var options = {}; options[position] = "+=" + width; lhnQuery(".lhnExternal").animate(options, 500); } } function externalPageClose() { if(lhnQuery(".lhnExternal").hasClass("standalone")){ var position = lhnJsSdk.options.embedArticleDirection; var width = lhnQuery(".lhnExternal.standalone").width(); }else{ var position = lhnJsSdk.settings.styles.position; var width = lhnJsSdk.settings.general.hocWidth; } if (parseInt(lhnQuery(".lhnExternal").css(position)) >= 0) { var options = {}; options[position] = "-=" + width; lhnQuery(".lhnExternal").animate(options, 800, function () { lhnQuery(".lhnExternal .lhnExternalContainer").html(""); }); } } function log(name, msg, force) { force = typeof (force) == 'undefined' ? false : force; if ((develop || force) && typeof console != 'undefined') console.log(name + ": " + msg); } function isMobile() { var check = false; (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true })(navigator.userAgent || navigator.vendor || window.opera); return check; } function convertTime(timestamp){ /* TODO detect est timezone offset*/ var estOffset = 240; var estOffsetString = "-0400"; /* var estOffset = 300; var estOffsetString = "-0500"; */ if(timestamp.substr(-1) == "Z"){ timestamp = timestamp.substr(0, timestamp.length-1) + estOffsetString; var ret = new Date(timestamp); }else{ var d = new Date(timestamp); var localOffset = d.getTimezoneOffset(); var offset = estOffset - localOffset; var ret = dateAdd(d, 'minute', offset); } return ret; } function dateAdd(date, interval, units) { var ret = new Date(date); switch(interval.toLowerCase()) { case 'year' : ret.setFullYear(ret.getFullYear() + units); break; case 'quarter': ret.setMonth(ret.getMonth() + 3*units); break; case 'month' : ret.setMonth(ret.getMonth() + units); break; case 'week' : ret.setDate(ret.getDate() + 7*units); break; case 'day' : ret.setDate(ret.getDate() + units); break; case 'hour' : ret.setTime(ret.getTime() + units*3600000); break; case 'minute' : ret.setTime(ret.getTime() + units*60000); break; case 'second' : ret.setTime(ret.getTime() + units*1000); break; default : ret = undefined; break; } return ret; } function ajaxCall(url, data, type, successCallback, options) { if(!isBlocked){ options = typeof (options) != 'undefined' ? options : {}; options.delay = typeof (options.delay) != 'undefined' ? options.delay : 5000; data.dept = lhnJsSdk.options.dept; /* TODO: Pass refresh token is valid and call OAuth again*/ if(!lhnStorage.getData("lhnJWT")){ connectOAuth(); } if ('XDomainRequest' in window && window.XDomainRequest !== null) { var xdr = new XDomainRequest(); if (xdr) { xdr.onload = function () { var data = xdr.responseText; while (typeof data != 'object') { data = JSON.parse(data); } if (data && typeof data.status != 'undefined' && data.status != "error" && successCallback != null) { successCallback(data, options); } else if (data.status == "error" && typeof data.message != 'undefined') { log("REST Error", data.message, true); if (options.errorCallback != "undefined" && options.errorCallback) { options.errorCallback(options); } else if (typeof options.el != 'undefined' && options.el) { lhnQuery("#" + options.el + " .lhnmsgbox").remove(); lhnQuery("<div class='error'>" + data.message + "</div>").appendTo("#" + options.el); } } }; xdr.onerror = function () { log("Ajax Error", "XDR Error", true); if(successCallback == chatMsgSentCallback){ setTimeout(function(){ options.delay = options.delay*2; ajaxCall(url, data, type, successCallback, options); }, options.delay); } }; xdr.ontimeout = function(){}; xdr.onprogress = function(){}; xdr.open(type, url + "?" + lhnQuery.param(data) + "&token=" + lhnStorage.getData("lhnJWT")); xdr.send(); } } else { lhnQuery.ajax({ url: url, data: data, type: type, success: function (data) { var data = typeof (data) != 'object' ? JSON.parse(data) : data; if (data && typeof data.status != 'undefined' && data.status != "error" && successCallback != null) { successCallback(data, options); } else if (data.status == "error" && typeof data.message != 'undefined') { log("REST Error", data.message, true); if (options.errorCallback != "undefined" && options.errorCallback) { options.errorCallback(options); }else if(typeof options.el != 'undefined' && options.el){ lhnQuery("#" + options.el + " .lhnmsgbox").remove(); lhnQuery("<div class='error'>" + data.message + "</div>").appendTo("#" + options.el); lhnQuery(".lhnHocOverlay").hide(); lhnQuery(".lhnloading").hide(); if(typeof options.temp_id != 'undefined'){ lhnQuery("#lhnCustomerMsgSent." + options.temp_id).remove(); } } } }, error: function (xhr, textStatus, errorThrown) { log("Ajax Error", textStatus + " - " + errorThrown, true); if(errorThrown == "Unauthorized"){ connectOAuth(); } if(successCallback == chatMsgSentCallback){ if(options.delay == 5000){ options.temp_id = Math.floor(Math.random() * (99999999 - 1)) + 1; lhnQuery(".lhnChat").append("<div id='lhnCustomerMsgSent' class='lhnCustomerMessage lhnWindow-message--container "+options.temp_id+"'><span></span><div class='lhnWindow-message'><div class='lhnTypingDot'></div><div class='lhnTypingDot'></div><div class='lhnTypingDot'></div></div></div>"); } setTimeout(function(){ options.delay = options.delay*2; ajaxCall(url, data, type, successCallback, options); }, options.delay); } }, beforeSend: function (xhr, settings) { xhr.setRequestHeader("Authorization", "Bearer " + lhnStorage.getData("lhnJWT")); } }); } } } function validate() { var bValid = true; lhnQuery(".hocactive form input, .hocactive form textarea, .hocactive form select").removeClass("lhnError"); lhnQuery(".hocactive form .lhnField").removeClass("lhnNot-valid"); lhnQuery("[rel*=required]:visible").each(function () { var currentElement = '#' + lhnQuery(this).attr('id'); if (lhnQuery(currentElement).attr('rel') == 'requiredText' && lhnQuery(currentElement).val() == '') { lhnQuery(this).addClass("lhnError"); lhnQuery(this).closest(".lhnField").addClass("lhnNot-valid"); lhnQuery(this).focus(); bValid = false; } else if (lhnQuery(currentElement).attr('rel') == 'requiredDDL' && lhnQuery(currentElement + ' option:selected').attr('value') == -1) { lhnQuery(this).addClass("lhnError"); lhnQuery(this).closest(".lhnField").addClass("lhnNot-valid"); lhnQuery(this).focus(); bValid = false; } if (lhnQuery(currentElement).attr('validatefor') == 'email' && !isValidEmailAddress(lhnQuery(currentElement).val())) { lhnQuery(this).addClass("lhnError"); lhnQuery(this).closest(".lhnField").addClass("lhnNot-valid"); lhnQuery(this).focus(); bValid = false; } else if (lhnQuery(currentElement).attr('validatefor') == 'phone' && !isValidPhone(lhnQuery(currentElement).val())) { lhnQuery(this).addClass("lhnError"); lhnQuery(this).closest(".lhnField").addClass("lhnNot-valid"); lhnQuery(this).focus(); bValid = false; } else if (lhnQuery(currentElement).attr('validatefor') == 'url' && !isValidUrl(lhnQuery(currentElement).val())) { lhnQuery(this).addClass("lhnError"); lhnQuery(this).closest(".lhnField").addClass("lhnNot-valid"); lhnQuery(this).focus(); bValid = false; } if (bValid == false) { return bValid; } }); return bValid; } function isValidPhone(a) { var filter = /^[0-9-+.]+$/; if (filter.test(a) && a.length > 5) { return true; }else { return false; } } function isValidEmailAddress(emailAddress) { var pattern = new RegExp(/^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/i); return pattern.test(emailAddress); }; function isValidUrl(url){ var pattern = new RegExp(/^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/); return pattern.test(url); } function isAlphaOnly(a) { var filter = /^[^*!@%_0-9\^]+$/; if (filter.test(a)) { return true; } else { return false; } } function isValidIp(ipaddress){ var pattern = new RegExp(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/); return pattern.test(ipaddress); } function stripToSize(string, length){ return string.replace(/^(.{200}[^\s]*).*/, "$1"); } function connectSocket(transport){ if(typeof transport != 'undefined'){ lhnJsSdk.lhnsocket = new Socket(sockurl + "/socket", {transport: transport}); }else{ lhnJsSdk.lhnsocket = new Socket(sockurl + "/socket", {heartbeatIntervalMs: 8000}); } lhnJsSdk.lhnsocket.connect(); lhnJsSdk.lhnsocket.onError(function(){ if(typeof socketJoined == 'undefined' || socketJoined == false){ lhnJsSdk.lhnsocket.disconnect(); lhnJsSdk.lhnsocket = null; connectSocket(LongPoll); } }); lhnJsSdk.lhnsocket.onOpen(function(){ startSocketTimer(); vchanConnect(); }); lhnJsSdk.lhnsocket.onClose(function(){ lhnJsSdk.log("visitor socket closed", JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).jti, navigator.userAgent); lhnSendError("visitor socket closed - " + JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).jti, navigator.userAgent); }); } function vchanConnect(){ lhnJsSdk.vChan = lhnJsSdk.lhnsocket.channel("visitor_session:" + JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).jti, { "token": lhnStorage.getData("lhnJWT"), "department_id": lhnJsSdk.options.dept || 0}); lhnJsSdk.vChan.on("online_status:changed", function (payload) { updateOnlineStatus(payload); }); lhnJsSdk.vChan.on("proactive_message:received", function (payload) { proactiveMsgReceived(payload); }); lhnJsSdk.vChan.on("trigger_invitation:received", function (payload) { triggerMsgReceived(payload); }); lhnJsSdk.vChan.on("trigger_promo:received", function (payload) { triggerPromoReceived(payload); }); lhnJsSdk.vChan.on("queue:status", function (payload) { updateQueueStatus(payload); }); lhnJsSdk.vChan.on("visitor:banned", function (payload) { isBlocked = true; lhnQuery("#lhnHocButton, #lhnHelpOutCenter, #lhnHocInvite").hide(); }); lhnJsSdk.vChan.on("chat:created", function (payload) { if(lhnJsSdk.chatSession == null){ lhnJsSdk.chatSession = payload.chat_session_id; lhnQuery("#hocSyschat").html(''); firstOpen.chat = true; openHOC("c"); } }); lhnJsSdk.vChan.on("jump_logic:message", function (payload) { if(lhnJsSdk.isHOC == true && (parseInt(lhnQuery("#lhnHelpOutCenter").css(lhnJsSdk.settings.styles.position)) < 0 || !lhnQuery("#hocSyschat").hasClass("hocactive") || lhnQuery("#lhnHelpOutCenter").css("visibility") == "hidden")){ openHOC('c'); }else{ lhnQuery(".lhnChat .lhnFieldInput").hide(); lhnQuery(".lhnChat").append("<div id='" + payload.field_info + "' class=\"lhnCustomerMessage lhnWindow-message--container\" attr='" + payload.order + "'><span></span><div class=\"lhnWindow-message\">" + payload.text + "</div><span class=\"lhnTime\"></span></div>"); if(typeof(lhnQuery(".lhnChat")[0]) != 'undefined'){ lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); } } }); lhnJsSdk.vChan.on("jump_logic:new_question", function (payload) { if(lhnJsSdk.isHOC == true && (parseInt(lhnQuery("#lhnHelpOutCenter").css(lhnJsSdk.settings.styles.position)) < 0 || !lhnQuery("#hocSyschat").hasClass("hocactive") || lhnQuery("#lhnHelpOutCenter").css("visibility") == "hidden")){ openHOC('c'); }else{ if(!jl_working){ if(typeof payload.html != 'undefined'){ lhnQuery(".lhnChat").append(payload.html); lhnQuery(".lhnChat").scrollTop(lhnQuery(".lhnChat")[0].scrollHeight); }else{ setTimeout(function(){ fetchNextJumpLogic(payload.win, payload.goto, payload.opts); }, 1500); } } } }); lhnJsSdk.vChan.on("jump_logic:dept", function (payload) { lhnJsSdk.options.dept = payload.dept; ajaxCall(appurl + apiversion + '/visitor/update_dept', {dept: payload.dept}, "POST", null, {}); lhnJsSdk.vChan.leave(); vchanConnect(); }); lhnJsSdk.vChan.on("jump_logic:ended", function (payload) { jumplogic_chatended(); }); lhnJsSdk.vChan.join() .receive("ok", function (payload) { socketJoined = true; lhnJsSdk.log("Joined Channel", "visitor_session:" + JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).jti); lhnJsSdk.isOnline = (lhnJsSdk.chatSession == null) ? payload.chat.online_status : true; online_type = (lhnJsSdk.options.dept != 0) ? "department": "client"; updateOnlineStatus({chat: {online_status: lhnJsSdk.isOnline, online_type: online_type}}); if(typeof window.lhnStatusUpdate == "function"){ window.lhnStatusUpdate(); } }) .receive("error", function(payload) { if(payload == "forbidden"){ isBlocked = true; lhnQuery("#lhnHocButton, #lhnHelpOutCenter, #lhnHocInvite").hide(); } }); lhnJsSdk.vChan.onClose(function(){ lhnJsSdk.log("visitor channel closed", JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).jti, navigator.userAgent); lhnSendError("visitor channel closed - " + JSON.parse(decodeBase64(lhnStorage.getData("lhnJWT").split(".")[1])).jti, navigator.userAgent); }); } var lhnStorage = { getData: function (key) { var cookies = document.cookie.split(";"); var cookie_data = null; for (var i = 0; i < cookies.length; i++) { var cookie = lhnQuery.trim(cookies[i]); if (cookie.indexOf(key + "=") == 0) { cookie_data = cookie.substring(key.length + 1, cookie.length); } } return cookie_data; }, setData: function (key, data, dur) { if (typeof (dur) == 'undefined') { dur = 86400; } var d = new Date(); d.setTime(d.getTime() + (dur * 1000)); var expires = "; expires=" + d.toGMTString(); var host = location.host; host = host.split(":")[0]; if(lhnJsSdk.options.domain_policy == "exact"){ document.cookie = key+"="+data+expires+"; path=" + document.location.pathname + ";"; }else if (host.split('.').length === 1 || isValidIp(host) || qs("lhn_preview") == "true" || lhnJsSdk.options.domain_policy == "strict"){ document.cookie = key+"="+data+expires+"; path=/;"; }else{ var domainParts = host.split('.'); domainParts.shift(); var domain = '.'+domainParts.join('.'); domain = domain.split(":")[0]; document.cookie = key+"="+data+expires+"; path=/; domain=" + domain; if (lhnStorage.getData(key) == null || lhnStorage.getData(key) != data){ domain = '.'+host; document.cookie = key+"="+data+expires+"; path=/; domain=" + domain; } } }, removeData: function(key){ var host = location.host; host = host.split(":")[0]; if(lhnJsSdk.options.domain_policy == "exact"){ document.cookie = key+"="+data+expires+"; path=" + document.location.pathname + ";"; }else if (host.split('.').length === 1 || isValidIp(host) || qs("lhn_preview") == "true" || lhnJsSdk.options.domain_policy == "strict"){ document.cookie = key + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/;"; }else{ var domainParts = host.split('.'); domainParts.shift(); var domain = '.'+domainParts.join('.'); domain = domain.split(":")[0]; document.cookie = key + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; domain=" + domain; } } }; function qs(key) { key = key.replace(/[*+?^$.\[\]{}()|\\\/]/g, "\\$&"); var match = location.search.match(new RegExp("[?&]"+key+"=([^&]+)(&|$)")); return match && decodeURIComponent(match[1].replace(/\+/g, " ")); } function decodeBase64(s) { var e = {}, i, b = 0, c, x, l = 0, a, r = '', w = String.fromCharCode, L = s.length; var A = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; for (i = 0; i < 64; i++) { e[A.charAt(i)] = i; } for (x = 0; x < L; x++) { c = e[s.charAt(x)]; b = (b << 6) + c; l += 6; while (l >= 8) { ((a = (b >>> (l -= 8)) & 0xff) || (x < (L - 2))) && (r += w(a)); } } return r; } function lb2br(text){ switch(typeof text){ case "string": return text.replace(/[\n]/g, "<br />"); break; case "object": text.html(lb2br(text.html())); break; default: return text; break; } } function html2text(html){ return html.replace(/&/g, "&amp;").replace(/</g,'&lt;').replace(/>/g,'&gt;'); } function convertUrlsAndImages(text) { text = text.replace(/(^|[^"'])(https?:\/\/\S*\.(png|jpg|jpeg|gif))([\s<]|$)/gi, "$1<a href=\"$2\" target=\"_blank\"><img src=\"$2\" /></a><br /><a href=\"$2\" target=\"_blank\">$2</a>$4"); var regex = /(?:(?:<a.+?<\/a>)|(?:<div class="lhnOption".+?<\/div>)|(?:<iframe.+?<\/iframe>)|(?:<img.+?\/?>)|(?:<input.+?\/>)|(?:<.+?value=.+?>)|(?:[a-z0-9.-]+@[a-z0-9.-]+)|\b(?!http)[a-z]+:\/\/[^\s<>]+[^\s<>.]|((?:(?:(?:https?:)?(?:\/\/)?(?:[a-z0-9-]+\.)+(?:[a-z]{2,}|\d{1,})(?:\/|\?)(?:[^\s<>\/\?]*[^\s<>.])*(?:(?:\/|\?)[^\s<>\/\?]*[^\s<>.])*)|(?:(?:https?:)?(?:\/\/)[^\s<>]+[^\s<>.])|(?:\b(?:[a-z0-9-]+\.){2,}(?:[a-z]{2,}|\d{1,}))|(?:\b(?:[a-z0-9-]+\.)(?:com|net|org)))))/gim; text = text.replace(regex, function (a, b) { if (b !== undefined) { return "<a href=\"" + a + "\" target=\"_blank\">" + a + "</a>"; } return a; }); var matches = text.match(/<a([^<]*?)>(.*?)<\/a>/gi); if (matches != null) { for (var i = 0; i < matches.length; i++) { if (matches[i].indexOf("@") < 0) { if (matches[i].indexOf("target=\"") < 0 && matches[i].indexOf("href=\"http") < 0) { text = text.replace(matches[i], matches[i].replace("href=\"", "target=\"_blank\" href=\"http://")); } else if (matches[i].indexOf("target=\"") < 0) { text = text.replace(matches[i], matches[i].replace("href=\"", "target=\"_blank\" href=\"")); } else if (matches[i].indexOf("href=\"http") < 0) { text = text.replace(matches[i], matches[i].replace("href=\"", "href=\"http://")); } } } } return text; } function buildDictionary(){ if(typeof lhnJsSdk.dictionary == 'undefined'){ lhnJsSdk.dictionary = {}; } lhnJsSdk.settings.language = typeof(lhnJsSdk.settings.language) == 'undefined' ? "english" : lhnJsSdk.settings.language; switch(lhnJsSdk.settings.language){ case "arabic": var dict = { agentConnecting: "الاتصال بالوكيل", callbackMenu: "أتصل مرة أخرى", callbackTitle: "تقديم الاستدعاء", cancel: "إلغاء", chatBoxPlaceholder: "رسالتك", chatMenu: "دردشة", chatTitle: "محادثة", email: "البريد الإلكتروني", emailTranscript: "إرسال نسخة إلكترونية إلى", emailSuccess: "تم إرسال نسخة الدردشة عبر البريد الإلكتروني إلى", endChat: "نهاية المحادثة", endChatConfirm: "هل أنت متأكد أنك تريد إنهاء الدردشة الحالية؟", hide: "إخفاء", inviteCancel: 'رفض', inviteStart: 'الدردشة الآن', knowledgeMenu: "معرفة", knowledgeSearch: "", knowledgeTitle: "البحث المعرفة", livechat: "دردشة مباشرة", livechat_offline: "احصل على مساعدة", newChatTitle: "محادثة جديدة", offlineTitle: "اترك رسالة", remoteAssistance: "يطلب الوكيل الدخول لعرض سطح المكتب", send: "إرسال", startChat: "بدء الدردشة", submit: "عرض", ticketMenu: "تذكرة", ticketTitle: "تسجيل التذكرة", uploadFile: "رفع ملف", uploadFileSuccess: "تم حفظ الملف بنجاح" }; break; case "chinese": var dict = { agentConnecting: "连接到代理", callbackMenu: "回电话", callbackTitle: "提交回调", cancel: "取消", chatBoxPlaceholder: "你的信息", chatMenu: "聊", chatTitle: "会话", email: "电子邮件", emailTranscript: "电子邮件抄录到", emailSuccess: "聊天记录已通过电子邮件发送给", endChat: "结束聊天", endChatConfirm: "你确定要结束当前聊天", hide: "隐藏", inviteCancel: '解雇', inviteStart: '现在聊天', knowledgeMenu: "知识", knowledgeSearch: "", knowledgeTitle: "搜索知识", livechat: "在线聊天", livechat_offline: "得到帮助", newChatTitle: "新的对话", offlineTitle: "留言", remoteAssistance: "代理正在请求访问以查看您的桌面", send: "发送", startChat: "开始聊天", submit: "提交", ticketMenu: "票", ticketTitle: "提交门票", uploadFile: "上传文件", uploadFileSuccess: "文件已成功保存" }; break; case "french": var dict = { agentConnecting: "Connexion à l'agent", callbackMenu: "Rappeler", callbackTitle: "Soumettre un rappel", cancel: "Annuler", chatBoxPlaceholder: "Votre message", chatMenu: "bavarder", chatTitle: "Conversation", email: "Email", emailTranscript: "Transcription par courriel à", emailSuccess: "La transcription du chat a été envoyée par courrier électronique à", endChat: "Fermer chat", endChatConfirm: "Etes-vous sûr de vouloir mettre fin à la conversation en cours?", hide: "cacher", inviteCancel: 'Rejeter', inviteStart: 'Discuter maintenant', knowledgeMenu: "Connaissance", knowledgeSearch: "", knowledgeTitle: "Recherche de connaissances", livechat: "Discussion en temps réel", livechat_offline: "OBTENIR DE L'AIDE", newChatTitle: "Nouvelle conversation", offlineTitle: "Laisser un message", remoteAssistance: "L'agent demande l'accès pour voir votre bureau", send: "Envoyer", startChat: "Démarrer la discussion", submit: "Soumettre", ticketMenu: "Billet", ticketTitle: "Soumettre un ticket", uploadFile: "Téléverser un fichier", uploadFileSuccess: "Le fichier a été enregistré avec succès" }; break; case "german": var dict = { agentConnecting: "Verbindung zum Agenten herstellen", callbackMenu: "Rückrufen", callbackTitle: "Einen Rückruf", cancel: "Stornieren", chatBoxPlaceholder: "Deine Nachricht", chatMenu: "Fragen", chatTitle: "Konversation", email: "Email", emailTranscript: "E-Mail-Protokoll an", emailSuccess: "Chat-Protokoll wurde per E-Mail gesendet", endChat: "Ende des Gesprächs", endChatConfirm: "Sind Sie sicher, dass Sie die aktuellen Chat zu beenden?", hide: "ausblenden", inviteCancel: 'Verlassen', inviteStart: 'jetzt chatten', knowledgeMenu: "Wissen", knowledgeSearch: "", knowledgeTitle: "Suchen Wissen", livechat: "Fragen", livechat_offline: "HILFE BEKOMMEN", newChatTitle: "Neues Gespräch", offlineTitle: "Hinterlass eine Nachricht", remoteAssistance: "Der Agent fordert Zugriff zum Anzeigen Ihres Desktops an", send: "Senden", startChat: "Chat beginnen", submit: "einreichen", ticketMenu: "Fahrkarte", ticketTitle: "Legen Sie eine Karte vor", uploadFile: "Datei hochladen", uploadFileSuccess: "Die Datei wurde erfolgreich gespeichert" }; break; case "hindi": var dict = { agentConnecting: "एजेंट से कनेक्ट करना", callbackMenu: "वापस कॉल करें", callbackTitle: "एक कॉलबैक जमा करें", cancel: "रद्द करना", chatBoxPlaceholder: "आपका सन्देश", chatMenu: "बातचीत", chatTitle: "बातचीत", email: "ईमेल", emailTranscript: "ईमेल ट्रांसक्रिप्ट में", emailSuccess: "चैट ट्रांसक्रिप्ट को ईमेल किया गया है", endChat: "बातचीत बंद करें", endChatConfirm: "आप वर्तमान चैट खत्म करना चाहते हैं आप सुनिश्चित हैं?", hide: "छिपाना", inviteCancel: 'बर्खास्त', inviteStart: 'अब बात करो', knowledgeMenu: "ज्ञान", knowledgeSearch: "", knowledgeTitle: "खोजें ज्ञान", livechat: "सीधी बातचीत", livechat_offline: "मदद लें", newChatTitle: "न्यू बातचीत", offlineTitle: "एक संदेश छोड़ें", remoteAssistance: "एजेंट आपके डेस्कटॉप को देखने के लिए एक्सेस का अनुरोध कर रहा है", send: "भेजना", startChat: "बातचीत शुरू कीजिए", submit: "जमा करें", ticketMenu: "टिकट", ticketTitle: "टिकट जमा करें", uploadFile: "दस्तावेज अपलोड करें", uploadFileSuccess: "फ़ाइल सफलतापूर्वक सहेज ली गई है" }; break; case "portuguese": var dict = { agentConnecting: "Conectando-se ao agente", callbackMenu: "Ligue de volta", callbackTitle: "Ligue de volta", cancel: "Cancelar", chatBoxPlaceholder: "Sua mensagem", chatMenu: "Conversar", chatTitle: "Conversação", email: "O email", emailTranscript: "Transcrição de e-mail para", emailSuccess: "A transcrição do bate-papo foi enviada por e-mail para", endChat: "Fim de papo", endChatConfirm: "Tem certeza de que quer terminar a conversa actual?", hide: "ocultar", inviteCancel: 'Demitir', inviteStart: 'Converse agora', knowledgeMenu: "Conhecimento", knowledgeSearch: "", knowledgeTitle: "Pesquisa Conhecimento", livechat: "Bate-papo ao vivo", livechat_offline: "OBTER AJUDA", newChatTitle: "nova conversa", offlineTitle: "Deixe um recado", remoteAssistance: "O agente solicita acesso para visualizar sua área de trabalho", send: "Enviar", startChat: "Iniciar bate-papo", submit: "Enviar", ticketMenu: "Bilhete", ticketTitle: "Enviar um ticket", uploadFile: "subir arquivo", uploadFileSuccess: "O arquivo foi salvo com sucesso" }; break; case "russian": var dict = { agentConnecting: "Подключение к агенту", callbackMenu: "Перезвони", callbackTitle: "Перезвони", cancel: "Отмена", chatBoxPlaceholder: "Ваше сообщение", chatMenu: "чат", chatTitle: "разговор", email: "Эл. адрес", emailTranscript: "Электронная почта", emailSuccess: "Сценарий чата отправлен по электронной почте", endChat: "Конец чат", endChatConfirm: "Вы уверены, что хотите завершить текущий чат ?", hide: "скрывать", inviteCancel: 'отклонять', inviteStart: 'Теперь говорите', knowledgeMenu: "Знание", knowledgeSearch: "", knowledgeTitle: "Поиск знаний", livechat: "Живой чат", livechat_offline: "ПОЛУЧИТЬ ПОМОЩЬ", newChatTitle: "Новый разговор", offlineTitle: "Оставить сообщение", remoteAssistance: "Агент запрашивает доступ к вашему компьютеру", send: "послать", startChat: "Начать Чат", submit: "Отправить", ticketMenu: "Билет", ticketTitle: "Отправить билет", uploadFile: "Загрузить файл", uploadFileSuccess: "Файл успешно сохранен" }; break; case "spanish": var dict = { agentConnecting: "Conexión al agente", callbackMenu: "Llamar de vuelta", callbackTitle: "Llamar de vuelta", cancel: "Cancelar", chatBoxPlaceholder: "Tu mensaje", chatMenu: "Charla", chatTitle: "Conversacion", email: "Email", emailTranscript: "Transcripción del correo electrónico a", emailSuccess: "La transcripción de la charla ha sido enviada por correo electrónico a", endChat: "Chat finalizado", endChatConfirm: "¿Está seguro de que desea terminar la charla actual ?", hide: "esconder", inviteCancel: 'Despedir', inviteStart: 'Chatea ahora', knowledgeMenu: "Conocimiento", knowledgeSearch: "", knowledgeTitle: "Buscar conocimiento", livechat: "CHAT EN VIVO", livechat_offline: "CONSIGUE AYUDA", newChatTitle: "nueva conversación", offlineTitle: "Deja un mensaje", remoteAssistance: "El agente está solicitando acceso para ver su escritorio", send: "Enviar", startChat: "Comenzar chat", submit: "Enviar", ticketMenu: "Boleto", ticketTitle: "Enviar un ticket", uploadFile: "Subir archivo", uploadFileSuccess: "El archivo se ha subido correctamente" }; break; default: var dict = { agentConnecting: "Connecting to agent", callbackMenu: "Callback", callbackTitle: "Request a callback", cancel: "Cancel", chatBoxPlaceholder: "Your message", chatMenu: "Chat", chatTitle: "Conversation", email: "Email", emailTranscript: "Email transcript to", emailSuccess: "Chat transcript has been emailed to", endChat: "End Chat", endChatConfirm: "Are you sure you want to end the current chat?", hide: "hide", inviteCancel: 'Dismiss', inviteStart: 'Chat now', knowledgeMenu: "FAQ", knowledgeSearch: "", knowledgeTitle: "Search Knowledge", livechat: "LIVE CHAT", livechat_offline: "GET HELP", newChatTitle: "New conversation", offlineTitle: "Leave a message", remoteAssistance: "The agent is requesting access to view your desktop", send: "Send", startChat: "Start Chat", submit: "Submit", surveyTitle: "Survey", ticketMenu: "Ticket", ticketTitle: "Submit a ticket", uploadFile: "Upload File", uploadFileSuccess: "File has been successfully uploaded" }; break; } for(var key in dict){ lhnJsSdk.dictionary[key] = typeof lhnJsSdk.dictionary[key] == "undefined" ? dict[key] : lhnJsSdk.dictionary[key]; } } function startSocketTimer(){ socket_timer = setTimeout(function(){ if(lhnJsSdk.chatSession == null){ lhnJsSdk.lhnsocket.disconnect(); lhnJsSdk.lhnsocket = null; if(lhnJsSdk.isOnline == false && preChatType != "jump_logic"){ if(lhnQuery("#lhnHelpOutCenter").css("visibility") == "visible"){ lhnJsSdk.closeHOC(); } firstOpen.chat = true; lhnQuery("#hocSyschat").html(''); } } }, 5*60*1000); } function stopSocketTimer() { clearTimeout(socket_timer); } function lhnSendError(data, userAgent) { if (data.length == 0) { return false; } var data = data.substring(0, 300); var src = baseurl + 'handler/e.ashx?c=' + encodeURIComponent(lhnJsSdk.setup.account) + '&e=' + encodeURIComponent(userAgent) + ': ' + encodeURIComponent(data) + '&p=' + encodeURIComponent([location.protocol, '//', location.host, location.pathname].join('')); var img = new Image(1, 1); img.onload = function () { img.src = src; }; img.src = baseurl + 'images/spacer.gif'; } /* Start of Google Analytics Integration */ ga_local._trackgtm = function(e, t, i) { if (typeof(dataLayer) == "object" && typeof(dataLayer.push) == "function") { dataLayer.push({ 'event': 'LiveHelpNow', 'eventCategory': 'LiveHelpNow', 'eventAction': e, 'eventLabel': t, 'eventNonInteraction': i }); } }; ga_local._trackgaq = function(e, t, i) { if (typeof(_gaq) == "object") { _gaq.push(["_trackEvent", "LiveHelpNow", e, t, null, i]); } }; ga_local._trackga = function (e, t, i) { var n = window.GoogleAnalyticsObject || "ga"; if (typeof(window[n]) == "function" && typeof(window[n].getAll) == "function") { for (var o = window[n].getAll(), r = 0; r < o.length; r++) { var a = o[r].get && o[r].get("name"); _sendToGaTracker(e, t, i, n, a); } } else if (typeof(window[n]) == "function" && function() { var e = false; return window[n](function(t) { typeof(t) == "object" && (e = true); }), e; }()) { _sendToGaTracker(e, t, i, n); } }; ga_local._trackgtag = function (e, t, i) { if (typeof(gtag) == "function" && typeof(dataLayer) == "object" && typeof(dataLayer.push) == "function") { gtag('event', e, { 'event_category' : 'LiveHelpNow', 'event_label' : t, 'non_interaction': i }); } }; function _sendToGaTracker(e, t, i, n, o) { var r = o ? o + ".send" : "send"; window[n](r, { hitType: "event", eventCategory: "LiveHelpNow", eventAction: e, eventLabel: t, nonInteraction: i }); } function detectGaType() { setTimeout(function () { gaType && ga_local["_track" + gaType] ? false : typeof(ga) == "function" ? gaType = "ga" : typeof(_gaq) == "object" ? gaType = "gaq" : typeof(gtag) == "function" && typeof(dataLayer) == "object" && typeof(dataLayer.push) == "function" ? gaType = "gtag" : typeof(dataLayer) == "object" && typeof(dataLayer.push) == "function" && (gaType = "gtm"); }, 500) } function getGaType() { return gaType ? gaType : (detectGaType(), gaType); } function setGaType(t) { if ((t == "gtm" && typeof(dataLayer) == "object" && typeof(dataLayer.push) == "function") || (t == "gtag" && typeof(gtag) == "function" && typeof(dataLayer) == "object" && typeof(dataLayer.push) == "function") || (t == "ga" && window.GoogleAnalyticsObject && typeof(window.GoogleAnalyticsObject) == "string") || (t == "gaq" && typeof(_gaq) == "object") ) { gaType = t; } } function doGaTrack(e, t, i) { var n = getGaType(); i = typeof (i) == "undefined" ? false : i; if (n && ga_local["_track" + n]) return ga_local["_track" + n](e, t, i); } /* End of Google Analytics Integration */ function refresh(){ if(lhnJsSdk.chatSession == null){ firstOpen = {chat: true, ticket: true, callback: true, knowledge: true}; lhnJsSdk.closeHOC(); } } function refresh_visitor(){ var data = { java: lhnJsSdk.options.java, res: lhnJsSdk.options.res, depth: lhnJsSdk.options.depth, custom1: lhnJsSdk.options.custom1, custom2: lhnJsSdk.options.custom2, custom3: lhnJsSdk.options.custom3, dept: lhnJsSdk.options.dept, cookie: lhnJsSdk.options.cookie, referrer: lhnJsSdk.options.referrer, pagetitle: lhnJsSdk.options.pagetitle, pageurl: lhnJsSdk.options.pageurl, chatwindowid: system_windows["chat"] }; ajaxCall(appurl + apiversion + "/visitor/init/", data, "POST", null); lhnJsSdk.vChan.leave(); vchanConnect(); } lhnJsSdk.init = init; lhnJsSdk.log = log; lhnJsSdk.openHOC = openHOC; lhnJsSdk.closeHOC = closeHOC; lhnJsSdk.isOnline = isOnline; lhnJsSdk.showInvite = showInvite; lhnJsSdk.embedChatButton = embedChatButton; lhnJsSdk.embedChat = embedPreChat; lhnJsSdk.embedSurvey = embedSurvey; lhnJsSdk.embedKbLookup = embedKbLookup; lhnJsSdk.embedKbArticle = embedKbArticle; lhnJsSdk.wireKbLookup = wireKbLookup; lhnJsSdk.embedTicket = embedTicket; lhnJsSdk.embedCallback = embedCallback; lhnJsSdk.externalPage = externalPage; lhnJsSdk.externalPageOpen = externalPageOpen; lhnJsSdk.externalPageClose = externalPageClose; lhnJsSdk.endChat = endChat; lhnJsSdk.setGaType = setGaType; lhnJsSdk.getGaType = getGaType; lhnJsSdk.doGaTrack = doGaTrack; lhnJsSdk.lhnsocket = lhnsocket; lhnJsSdk.track_conversion = track_conversion; lhnJsSdk.refresh = refresh; lhnJsSdk.refresh_visitor = refresh_visitor; })(typeof(lhnJsSdk) != 'undefined' ? lhnJsSdk : (lhnJsSdk = {})); if(document.readyState == "complete"){ lhnJsSdk.init(); }else{ if (window.addEventListener) { window.addEventListener('load', function () { lhnJsSdk.init(); }); } else{ window.attachEvent('onload', function () { lhnJsSdk.init(); }); } } 